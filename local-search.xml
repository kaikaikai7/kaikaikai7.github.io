<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>决策树</title>
    <link href="/2023/10/09/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%AE%97%E6%B3%95%E7%AF%87/%E5%86%B3%E7%AD%96%E6%A0%91/"/>
    <url>/2023/10/09/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%AE%97%E6%B3%95%E7%AF%87/%E5%86%B3%E7%AD%96%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="直观理解">1 直观理解</h1><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202310091550549.jpg"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><h1 id="信息熵">2 信息熵</h1><ul><li><p>信息熵是度量样本集合纯度最常用的一种指标。</p></li><li><p>假定当前样本集合D中第k类样本所占的比例为<spanclass="math inline">\(\mathrm{p}_{\mathrm{k}}(\mathrm{k}=1,2,\ldots,|\mathrm{y}|)\)</span>，则D的信息熵定义为： <spanclass="math display">\[\operatorname{Ent}(D)=-\sum_{k=1}^{|y|} p_k \log _2 p_k\]</span></p></li><li><p>Ent(D)的值越小，则D的纯度越高</p></li></ul><h1 id="信息增益information-gain--id3决策树">3 信息增益（Informationgain）- ID3决策树</h1><ul><li><p>ID3（IterativeDichotomiser，迭代二分器）决策树学习算法，以信息增益准则来选择划分属性。</p></li><li><p>假定离散属性a有V个可能的取值<span class="math inline">\(\lbracea^1,a^2,...,a^V\rbrace\)</span>，若使用a来对样本集D进行划分，则会产生V个分支结点，其中第v个分支结点包含了D中所有在属性a上取值为<spanclass="math inline">\(a^v\)</span>的样本，即为<spanclass="math display">\[D^v\]</span>。给分支结点赋予权重$$，样本数越多的分支结点的影响越大，信息增益越大，使用属性a对样本集D进行划分所获得的纯度提升越大。以属性a对数据集D进行划分所获得的信息增益为：<span class="math display">\[\operatorname{Gain}(\mathrm{D},\mathrm{a})=\operatorname{Ent}(\mathrm{D})-\sum_{\mathrm{v}=1}^{\mathrm{V}}\frac{\left|\mathrm{D}^{\mathrm{v}}\right|}{|\mathrm{D}|}\operatorname{Ent}\left(\mathrm{D}^{\mathrm{v}}\right)\]</span></p></li><li><p>信息增益准则对可取值数目较多的属性有所偏好，因为属性取值多则划分的更干净。但这可能导致出现一些荒谬错误，于是引入增益率。</p></li></ul><h1 id="增益率gain-ratio--c4.5决策树">4 增益率（Gain Ratio）-C4.5决策树</h1><p><span class="math display">\[\text { Gain\_ratio(D, a })=\frac{\operatorname{Gain}(\mathrm{D},\mathrm{a})}{\mathrm{IV}(\mathrm{a})}\]</span></p><p>其中， <span class="math display">\[\mathrm{IV}(\mathrm{a})=-\sum_{\mathrm{v}=1}^{\mathrm{V}}\frac{\left|\mathrm{D}^{\mathrm{v}}\right|}{|\mathrm{D}|} \log _2\frac{\left|\mathrm{D}^{\mathrm{v}}\right|}{|\mathrm{D}|}\]</span></p><ul><li>除以IV可以看做是一个归一化（标准化）过程，这里，属性a的可能取值数目越多，IV（a）值越大，信息增益除以IV后值越小，抵消了分支多的好处。但是这样一来，增益率会偏好分支少的属性，C4.5采用两步对此进行了折中改进：<ul><li>先对所有属性的信息增益进行从高到低排序，从候选划分属性中选出信息增益高于平均水平的</li><li>然后从中选出增益率高的</li></ul></li></ul><h1 id="基尼指数gini-index--cart决策树">5 基尼指数（Gini Index）-CART决策树</h1><ul><li><p>CART（Classification and RegressionTree）决策树使用基尼指数来选择划分属性，从属性集A中选择基尼指数最小的属性作为最优划分属性。从统计建模的角度出发考虑问题，前面都是用信息论角度去考虑。该算法既可用于分类，又可用于回归。</p></li><li><p>数据集D的纯度，用基尼值度量为（值越小，纯度越高）： <spanclass="math display">\[\operatorname{Gini}(\mathrm{D})=\sum_{\mathrm{k}=1}^{|\mathrm{y}|}\sum_{\mathrm{k}^{\prime} \neq \mathrm{k}} \mathrm{p}_{\mathrm{k}}\mathrm{p}_{\mathrm{k}}^{\prime}=1-\sum_{\mathrm{k}=1}^{|\mathrm{y}|}\mathrm{p}_{\mathrm{k}}^2\]</span></p></li><li><p>属性a的基尼指数定义为： <span class="math display">\[\operatorname{Gini} \_\operatorname{index}(\mathrm{D},\mathrm{a})=\sum_{\mathrm{v}=1}^{\mathrm{V}}\frac{\left|\mathrm{D}^{\mathrm{v}}\right|}{|\mathrm{D}|}\operatorname{Gini}(\mathrm{D})\]</span></p></li></ul><h1 id="剪枝pruning">6 剪枝（pruning）</h1><p>在上面我们提到了信息增益、增益率、基尼系数三个不同的划分属性，有人会疑惑，不同的划分原则是否会对结果产生影响，研究表明划分选择的各种准则虽然对决策树的尺寸有较大的影响，但对泛化性能的影响有限。相比而言，剪枝方法和程度对决策树泛化性能的影响更为显著。决策树从上到下划分实际上完成的是从全部到局部的划分，分到局部时可能会受到噪音的影响，容易产生不必要的分枝而过拟合，剪枝是决策树对付“过拟合”的主要手段。</p><h2 id="预剪枝prepruning">6.1 预剪枝（prepruning）</h2><p>指在决策树生成过程中，对每个结点在划分前先进行估计，若当前结点的划分不能带来决策树泛化性能提升，则停止划分并将当前结点标记为叶结点。示例：划分后精度变低了，则不划分进行剪枝，划分后精度没变化，遵循奥卡姆剃刀原则，不划分。</p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202310091550550.png"alt="image-20231009154011573" /><figcaption aria-hidden="true">image-20231009154011573</figcaption></figure><h2 id="后剪枝postpruning">6.2 后剪枝（postpruning）</h2><p>后剪枝是指先从训练集生成一棵完整的决策树，然后自底向上地对非叶结点进行考察，若将该结点对应的子树替换为叶结点能带来决策树泛化性能提升，则将该子树替换为叶结点。示例：由下到上，每一个结点都要考察是否剪，如果剪前剪后没有变化则不剪。</p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202310091550551.jpg"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202310091550552.png"alt="image-20231009154708121" /><figcaption aria-hidden="true">image-20231009154708121</figcaption></figure><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202310091550553.png"alt="image-20231009154730453" /><figcaption aria-hidden="true">image-20231009154730453</figcaption></figure><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202310091550554.png"alt="image-20231009154751919" /><figcaption aria-hidden="true">image-20231009154751919</figcaption></figure><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202310091550555.png"alt="image-20231009154800431" /><figcaption aria-hidden="true">image-20231009154800431</figcaption></figure><h2 id="预剪枝vs后剪枝">6.3 预剪枝VS后剪枝</h2><p>（1）时间开销</p><ul><li>预剪枝：测试时间开销降低，训练时间开销降低</li><li>后剪枝：测试时间开销降低，训练时间开销增加</li></ul><p>（2）过/欠拟合风险：</p><ul><li>预剪枝：过拟合风险降低，欠拟合风险增加</li><li>后剪枝：过拟合风险降低，欠拟合风险基本不变</li></ul><p>（3）泛化性能：后剪枝通常优于预剪枝</p><p>参考教程：</p><ol type="1"><li><ahref="https://www.bilibili.com/video/BV1Xp4y1U7vW/?spm_id_from=333.788.recommend_more_video.-1&amp;vd_source=5a5397ea8e931fbb28195dfdfa5e1b03">【五分钟机器学习】可视化的决策过程：决策树Decision Tree_哔哩哔哩_bilibili</a></li><li><ahref="https://blog.csdn.net/weixin_43182102/article/details/122106265">【机器学习sklearn】决策树（DecisionTree）算法-CSDN博客</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
      <category>算法篇</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>准确率、精确率、召回率</title>
    <link href="/2023/10/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%90%86%E8%AE%BA%E7%AF%87/%E5%87%86%E7%A1%AE%E7%8E%87%E3%80%81%E7%B2%BE%E7%A1%AE%E7%8E%87%E3%80%81%E5%8F%AC%E5%9B%9E%E7%8E%87/"/>
    <url>/2023/10/08/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%90%86%E8%AE%BA%E7%AF%87/%E5%87%86%E7%A1%AE%E7%8E%87%E3%80%81%E7%B2%BE%E7%A1%AE%E7%8E%87%E3%80%81%E5%8F%AC%E5%9B%9E%E7%8E%87/</url>
    
    <content type="html"><![CDATA[<h1 id="混淆矩阵">1 混淆矩阵</h1><table><thead><tr class="header"><th></th><th>实际正例</th><th>实际负例</th></tr></thead><tbody><tr class="odd"><td>预测正例</td><td>TP</td><td>FP</td></tr><tr class="even"><td>预测负例</td><td>FN</td><td>TN</td></tr></tbody></table><ul><li>TP（True Positives)：真正例，预测为正例而且实际上也是正例；</li><li>FP（False Positives)：假正例，预测为正例然而实际上却是负例；</li><li>FN（false Negatives)：假负例，预测为负例然而实际上却是正例；</li><li>TN（True Negatives)：真负例，预测为负例而且实际上也是负例。</li></ul><h1 id="准确率">2 准确率</h1><p><span class="math display">\[Accuracy=\frac{TP+TN}{TP+FP+FN+TN}\]</span></p><ul><li>定义：所有的预测正确（正类负类）的占总的比重。</li><li>虽然准确率能够判断总的正确率，但是在样本不均衡的情况下，并不能作为很好的指标来衡量结果。在样本不平衡的情况下，得到的高准确率没有任何意义，此时准确率就会失效。例如如果一个肿瘤科医生看病，不经检验就告诉每个患者他们没有患病，检查的准确率为99.6%！（癌症患病率约为0.4%）。</li></ul><h1 id="精确率">3 精确率</h1><p><span class="math display">\[Precision=\frac{TP}{TP+FP}\]</span></p><ul><li>定义：也叫查准率，即正确预测为正的占全部预测为正的比例(不准错，宁愿漏检，也不能让现有的预测有错)。</li><li>精确率代表对正样本结果中的预测准确程度，准确率则代表整体的预测准确程度，包括正样本和负样本。分母是预测到的正类，精确率的提出是让模型的现有预测结果尽可能不出错。应用场景例如美国刑事审判体系，疑罪从无。</li></ul><h1 id="召回率">4 召回率</h1><p><span class="math display">\[Recall=\frac{TP}{TP+FN}\]</span></p><ul><li>定义：也叫查全率，即正确预测为正的占全部实际为正的比例(不准漏，宁可错杀一千，也不放过一个)。</li><li>召回率(Recall)是针对原样本而言的，其含义是在实际为正的样本中被预测为正样本的概率。高召回率意味着更少的漏检，但会导致更多的误检。应用场景例如癌症筛查、排查安全隐患。</li></ul><h1 id="f-score">5 F-Score</h1><p><span class="math display">\[F_{Score}=(1+\beta^2)\frac{Precision \times Recall}{\beta^2 \timesPrecision+Recall}\]</span></p><ul><li>精确率和召回率互相影响，理想状态下肯定追求两个都高，但是实际情况是两者相互“制约”：追求精确率高，则召回率就低；追求召回率高，则通常会影响精确率。这样就需要综合考虑它们，最常见的方法就是F-score。也可以绘制出P-R曲线图，观察它们的分布情况。</li><li>F-Score：权衡精确率（Precision）和召回率（Recall），较为全面地评价一个分类器。F-Score是精确率和召回率的调和平均。F-Score越大说明模型质量更高。</li><li>关于β取值：<ul><li>β如果取1,表示Precision与Recall一样重要</li><li>β如果取小于1,表示Precision比Recall重要</li><li>β如果取大于1,表示Recall比Precision重要</li></ul></li></ul><p>参考教程：</p><ol type="1"><li><ahref="https://blog.csdn.net/lhxez6868/article/details/108150777">准确度(accuracy)、精确率（precision)、召回率（recall）、F1值谈谈我的看法_精确度和召回率-CSDN博客</a></li><li><ahref="https://zhuanlan.zhihu.com/p/369936908">准确率、精确率、召回率 -知乎 (zhihu.com)</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
      <category>理论篇</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>支持向量机</title>
    <link href="/2023/10/05/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%AE%97%E6%B3%95%E7%AF%87/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA/"/>
    <url>/2023/10/05/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E7%AE%97%E6%B3%95%E7%AF%87/%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="svm直觉理解">1 SVM直觉理解</h1><p>概念：支持向量机<code>Supported Vector Machine</code>，基于线性划分，输出一个最优化的分隔超平面，该超平面不但能将两类正确分开，且使分类间隔最大</p><p>本质：量化两类数据差异</p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202310051404845.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><h1 id="软硬间隔">2 软硬间隔</h1><ul><li>间隔距离体现两类数据差异大小</li><li>硬间隔：使⽤超平⾯进⾏分割数据的过程中，如果我们严格地让所有实例都不在最⼤间隔之间，只位于正确的⼀边。硬间隔分类有两个问题：⾸先，它只在数据是线性可分离的时候才有效；其次，它对异常值⾮常敏感。</li><li>软间隔：软间隔的⽬标是尽可能在保持最⼤间隔宽阔和限制间隔违例之间找到良好的平衡。</li></ul><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202310051404846.png"alt="image-20231005102746477" /><figcaption aria-hidden="true">image-20231005102746477</figcaption></figure><h1 id="升维转换和核函数">3 升维转换和核函数</h1><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202310051404847.png"alt="image-20231005134734247" /><figcaption aria-hidden="true">image-20231005134734247</figcaption></figure><p>升维转换目的：处理低维度下无法方便分类的数据（直接采用可能导致维数灾难）</p><p>核函数：不用知晓具体的维度转换函数，直接获得数据的高维度差异度</p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202310051404848.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>参考教程：</p><ol type="1"><li><ahref="https://www.bilibili.com/video/BV16T4y1y7qj/?spm_id_from=333.337.search-card.all.click&amp;vd_source=d1182948f36423c63e7e3b31ad8c5163">【数之道】支持向量机SVM是什么，八分钟直觉理解其本质_哔哩哔哩_bilibili</a></li><li><ahref="https://blog.csdn.net/qq_39763246/article/details/119926367">机器学习算法08 ——支持向量机SVM算法(核函数、手写数字识别案例)_svm算法案例_老板来碗小面加蛋~的博客-CSDN博客</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>机器学习</category>
      
      <category>算法篇</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>绪论</title>
    <link href="/2023/10/05/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/%E7%BB%AA%E8%AE%BA/"/>
    <url>/2023/10/05/%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98/%E7%BB%AA%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="背景">1 背景</h1><ul><li>数据爆炸但知识贫乏</li><li>商业数据到商业智能的进化</li><li>科学发展范式（经验科学、理论科学、计算科学、数据科学）</li></ul><h1 id="基本概念">2 基本概念</h1><p>定义：从数据中得到信息和知识的过程</p><h1 id="主要内容">3 主要内容</h1><ul><li>关联规则挖掘（啤酒和尿布）</li><li>分类<code>Predictive</code>：根据特征和观测数据建立数学模型，对新的数例进行判断的过程（监督式机器学习）<ul><li>标签分类</li><li>数值预测</li></ul></li><li>聚类<code>Descriptive</code>：仅根据刚刚的特征对数据进行聚类划分（非监督式机器学习）</li><li>回归：建立多个变量之间的定量关系</li></ul><p>Q：数据分类和数据聚类的概念如何区别？</p><p>数据分类，分类的类别是已知的，训练某种学习机器（即得到某种目标函数），使它能够对未知类别的样本进行分类；数据聚类，分类的类别是未知的，通过聚类分析将数据聚合成几个群体。</p><p>Q：数据、信息、知识的概念如何区分？</p><ul><li>数据：数据是未经加工处理的原始信息。</li><li>信息：信息是对原始的数据信息进行观察得出的一些结论。</li><li>知识：知识是对信息进行总结归纳，逻辑分析，得到的理解和某些事物的规律。</li></ul>]]></content>
    
    
    <categories>
      
      <category>数据挖掘</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>视频网站基本原理</title>
    <link href="/2023/10/04/Python/Spider/video/%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/"/>
    <url>/2023/10/04/Python/Spider/video/%E8%A7%86%E9%A2%91%E7%BD%91%E7%AB%99%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="视频处理流程">1 视频处理流程</h1><ul><li>用户上传</li><li>转码（高清、标清）</li><li>切片处理（单个文件进行拆分)</li></ul><h1 id="m3u8文件">2 m3u8文件</h1><ul><li>视频播放顺序</li><li>视频存储位置</li></ul><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202310050925393.png"alt="image-20231004161812532" /><figcaption aria-hidden="true">image-20231004161812532</figcaption></figure><h1 id="抓取流程">3 抓取流程</h1><ol type="1"><li>找到m3u8文件</li><li>通过m3u8文件下载到ts文件</li><li>将ts文件合并为一个mp4文件</li></ol>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Spider</category>
      
      <category>video</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>分布式爬虫基础</title>
    <link href="/2023/10/04/Python/Spider/Scrapy/%E5%88%86%E5%B8%83%E5%BC%8F%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/10/04/Python/Spider/Scrapy/%E5%88%86%E5%B8%83%E5%BC%8F%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="概念">1 概念</h1><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202310041406344.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure><p>搭建一个分布式的机群，让其对一组资源进行分布联合爬取</p><h1 id="作用">2 作用</h1><p>提高爬取数据的效率</p><h1 id="实现">3 实现</h1><ul><li><p>环境准备</p><ul><li>安装<code>scrapy-redis</code>组件（原生的scrapy不能实现分布式爬虫,因为调度器和管道不能被分布式机群共享，所以需要配合该组件进行实现）</li><li><code>scrapy-redis</code>组件作用：给原生的scrapy框架提供可以被共享的调度器和管道</li></ul></li><li><p>实现流程：</p><ul><li><p>创建工程</p></li><li><p>创建爬虫文件</p></li><li><p>修改当前爬虫文件</p><ul><li>导入模块：<code>from scrapy_redis.spiders import RedisSpider</code></li><li>注释allowed_domains和start_urls</li><li>添加属性（共享的调度器队列名称）：<code>redis_key='xxx'</code></li><li>修改父类为：<code>RedisCrawlSpider</code></li></ul></li><li><p>修改配置文件</p><ul><li><p>指定管道</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs python">ITEM_PIPELINES = &#123;<br>    <span class="hljs-string">&#x27;scrapy_redis.pipelines.RedisPipeline&#x27;</span>:<span class="hljs-number">400</span><br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>指定调度器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 去重容器类：使用Redis的set集合来存储请求的指纹数据，从而实现请求去重的持久化</span><br>DUPEFILTER_CLASS= <span class="hljs-string">&quot;scrapy_redis.dupefilter.RFPDupeFilter&quot;</span><br><span class="hljs-comment"># 使用scrapy_redis组件自己的调度器</span><br>SCHEDULER=<span class="hljs-string">&quot;scrapy_redis.scheduler.Scheduler&quot;</span><br><span class="hljs-comment"># 配置调度器是否持久化，即当爬虫结束，是否清空Redis请求队列和set指纹数据</span><br>SCHEDULER_PERSIST=<span class="hljs-literal">True</span><br></code></pre></td></tr></table></figure></li><li><p>指定redis服务器</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">REDIS_HOST=<span class="hljs-string">&#x27;&#x27;</span><br>REDIS_PORT=<br></code></pre></td></tr></table></figure></li></ul></li><li><p>redis相关操作配置</p><ul><li>redis配置文件（redis.windows.conf）</li><li>结合配置文件开启redis服务：<code>redis-server 配置文件</code></li><li>启动客户端：<code>redis-cli</code></li></ul></li><li><p>执行工程：<code>scrapy runspider xxx.py</code>（spider目录下）</p></li><li><p>向调度器队列中放入一个起始url（客户端中执行）：<code>lpush redis_key start_urls</code></p></li></ul></li></ul><h1 id="redis存储的数据">4 redis存储的数据</h1><ul><li><p>spiderName:items</p><ul><li>list类型，保存爬虫获取到的数据item内容是json字符串。</li></ul></li><li><p>spiderName:dupefilter</p><ul><li>set类型，用于爬虫访问的URL去重内容，是40个字符的url的hash字符串</li></ul></li><li><p>spiderName:start_urls</p><ul><li>list类型，用于接收redis spider启动时的第一个url</li></ul></li><li><p>spiderName:requests</p><ul><li>zset类型，用于存放requests等待调度。内容是requests对象的序列化字符串</li></ul></li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Spider</category>
      
      <category>Scrapy</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>基于CrawlSpider的全站数据爬取</title>
    <link href="/2023/10/02/Python/Spider/Scrapy/%E5%9F%BA%E4%BA%8ECrawlSpider%E7%9A%84%E5%85%A8%E7%AB%99%E6%95%B0%E6%8D%AE%E7%88%AC%E5%8F%96/"/>
    <url>/2023/10/02/Python/Spider/Scrapy/%E5%9F%BA%E4%BA%8ECrawlSpider%E7%9A%84%E5%85%A8%E7%AB%99%E6%95%B0%E6%8D%AE%E7%88%AC%E5%8F%96/</url>
    
    <content type="html"><![CDATA[<h1 id="概念">1 概念</h1><p>CrawlSpider：Spider的一个子类</p><h1 id="使用">2 使用</h1><ol type="1"><li><p>创建工程</p></li><li><p>cd project</p></li><li><p>创建爬虫文件（CrawlSpider）:<code>scrapy genspider -t crawl spiderName allowed_domains</code></p><ul><li>链接提取器：根据指定规则（allow="正则"）进行指定链接的提取</li><li>规则解析器：将链接提取器提取到的链接进行指定规则（callback）的解析操作</li><li>可以有多个链接提取器，规则解析器</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> scrapy<br><span class="hljs-keyword">from</span> scrapy.linkextractors <span class="hljs-keyword">import</span> LinkExtractor<br><span class="hljs-keyword">from</span> scrapy.spiders <span class="hljs-keyword">import</span> CrawlSpider, Rule<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">CrawlspiderSpider</span>(<span class="hljs-title class_ inherited__">CrawlSpider</span>):<br>    name = <span class="hljs-string">&quot;crawlspider&quot;</span><br>    allowed_domains = [<span class="hljs-string">&quot;xxx.com&quot;</span>]<br>    start_urls = [<span class="hljs-string">&quot;http://xxx.com/&quot;</span>]<br><br>    link=LinkExtractor(allow=<span class="hljs-string">r&quot;Items/&quot;</span>)<br>    rules = (<br>        <span class="hljs-comment"># 规则解析器</span><br>        <span class="hljs-comment"># 链接提取器作为一个参数被作用到规则解析器里</span><br>        <span class="hljs-comment"># follow为ture时可以将链接提取器继续作用到链接提取器提取到的链接对应页面中</span><br>        Rule(link, callback=<span class="hljs-string">&quot;parse_item&quot;</span>, follow=<span class="hljs-literal">True</span>),<br>    )<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_item</span>(<span class="hljs-params">self, response</span>):<br>        <span class="hljs-keyword">pass</span><br></code></pre></td></tr></table></figure><h1 id="item">3 item</h1><p>当有多个item时，若需要判断item类型，使用：<code>item.__class__.__name__</code></p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Spider</category>
      
      <category>Scrapy</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>基本配置（Edge版）</title>
    <link href="/2023/10/02/Python/Spider/selenium/%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%EF%BC%88Edge%E7%89%88%EF%BC%89/"/>
    <url>/2023/10/02/Python/Spider/selenium/%E5%9F%BA%E6%9C%AC%E9%85%8D%E7%BD%AE%EF%BC%88Edge%E7%89%88%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<ol type="1"><li><p>安装 selenium</p></li><li><p>下载浏览器引擎（需对应浏览器版本<code>浏览器 --&gt; 设置 --&gt; 关于 Microsoft Edge --&gt; 版本信息</code>）</p></li><li><p>文件重命名为： <code>MicrosoftWebDriver.exe</code></p></li><li><p>拷贝到python.exe目录下（例：<code>F:\Anaconda\install\envs\spider</code>）和浏览器目录下（例：<code>C:\Program Files (x86)\Microsoft\Edge\Application</code>）</p></li><li><p>示例代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> selenium <span class="hljs-keyword">import</span> webdriver<br><br>driver = webdriver.Edge(<span class="hljs-string">&quot;C:\Program Files (x86)\Microsoft\Edge\Application\MicrosoftWebDriver.exe&quot;</span>)<br>driver.get(<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>)   <span class="hljs-comment"># 你要进入的网页</span><br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Spider</category>
      
      <category>selenium</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>基于Spider的全站数据爬取</title>
    <link href="/2023/10/02/Python/Spider/Scrapy/%E5%9F%BA%E4%BA%8ESpider%E7%9A%84%E5%85%A8%E7%AB%99%E6%95%B0%E6%8D%AE%E7%88%AC%E5%8F%96/"/>
    <url>/2023/10/02/Python/Spider/Scrapy/%E5%9F%BA%E4%BA%8ESpider%E7%9A%84%E5%85%A8%E7%AB%99%E6%95%B0%E6%8D%AE%E7%88%AC%E5%8F%96/</url>
    
    <content type="html"><![CDATA[<h1 id="概念">1 概念</h1><p>将某网站中某模块下全部页码对应的页面数据进行爬取</p><h1 id="实现方式">2 实现方式</h1><ol type="1"><li><p>将所有页面url添加到start_urls列表中</p></li><li><p>手动实现请求发送（推荐）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">XiaohuaSpider</span>(scrapy.Spider):<br>    name = <span class="hljs-string">&quot;xiaohua&quot;</span><br>    allowed_domains = [<span class="hljs-string">&quot;699pic.com&quot;</span>]<br>    start_urls = [<span class="hljs-string">&quot;https://699pic.com/tupian/photo-264659.html&quot;</span>]<br><br>    <span class="hljs-comment"># 通用url模板</span><br>    url=<span class="hljs-string">&quot;https://699pic.com/photo/264659-%d.html&quot;</span><br>    page_num=<span class="hljs-number">2</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">parse</span>(<span class="hljs-params">self, response</span>):<br>        li_list=response.xpath(<span class="hljs-string">&#x27;/html/body/div[11]/div[4]/div/div&#x27;</span>)<br>        <span class="hljs-keyword">for</span> li <span class="hljs-keyword">in</span> li_list:<br>            img_name=li.xpath(<span class="hljs-string">&#x27;./a/@title&#x27;</span>).extract_first()<br>            <span class="hljs-built_in">print</span>(img_name)<br><br>        <span class="hljs-keyword">if</span> self.page_num &lt;= <span class="hljs-number">3</span>:<br>            new_url=<span class="hljs-built_in">format</span>(self.url%self.page_num)<br>            self.page_num+=<span class="hljs-number">1</span><br>            <span class="hljs-comment"># callback为回调函数，进行数据解析</span><br>            <span class="hljs-keyword">yield</span> scrapy.Request(url=new_url,callback=self.parse)<br></code></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Spider</category>
      
      <category>Scrapy</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>中间件</title>
    <link href="/2023/10/02/Python/Spider/Scrapy/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    <url>/2023/10/02/Python/Spider/Scrapy/%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="下载中间件">1 下载中间件</h1><ul><li><p>位置：引擎和下载器之间</p></li><li><p>作用：批量拦截到整个工程中所有的请求和响应</p></li><li><p>拦截请求：</p><ul><li>UA伪装（UA池）:process_request</li><li>代理IP（代理池）:process_exception需要<code>return request</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 拦截请求</span><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_request</span>(<span class="hljs-params">self, request, spider</span>):<br>      <span class="hljs-comment"># UA伪装</span><br>      request.headers[<span class="hljs-string">&#x27;User-Agent&#x27;</span>]= random.choice(self.user_agents)<br>      <span class="hljs-comment"># 仅测试使用</span><br>      <span class="hljs-comment"># request.meta[&#x27;proxy&#x27;] = &quot;http://182.34.33.244:9999&quot;</span><br>      <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>  <br>  <span class="hljs-comment"># 拦截发生异常的请求</span><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_exception</span>(<span class="hljs-params">self, request, exception, spider</span>):<br>      <span class="hljs-comment"># 代理池一般在该方法中进行设置</span><br>      <span class="hljs-comment"># request.meta[&#x27;proxy&#x27;]=</span><br>      <span class="hljs-comment"># 重新发送该请求</span><br>      <span class="hljs-keyword">return</span> request<br></code></pre></td></tr></table></figure></li><li><p>拦截响应：</p><ul><li>篡改响应数据（应对动态加载）</li><li>判断网页数据是否为动态加载，可以通过禁用js观察数据是否能够加载出来得到</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">process_response</span>(<span class="hljs-params">self, request, response, spider</span>):<br>    <span class="hljs-comment"># 获取爬虫类定义的浏览器对象</span><br>    driver=spider.driver<br>    <span class="hljs-comment"># 挑选出指定响应对象进行篡改</span><br>    <span class="hljs-comment"># 挑选过程：url---request---response</span><br>    <span class="hljs-keyword">if</span> request.url <span class="hljs-keyword">in</span> spider.module_urls:<br>        <span class="hljs-comment"># 基于selenium便捷地获取动态加载数据</span><br>        driver.get(request.url)<br>        sleep(<span class="hljs-number">1</span>)<br>        page_text=driver.page_source<br>        <span class="hljs-comment"># 实例化新的响应对象</span><br>        new_response=HtmlResponse(url=request.url,body=page_text,encoding=<span class="hljs-string">&quot;utf-8&quot;</span>,request=request)<br>        <span class="hljs-keyword">return</span> new_response<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> response<br></code></pre></td></tr></table></figure></li><li><p>需要在配置文件中开启中间件</p></li></ul><h1 id="爬虫中间件">2 爬虫中间件</h1>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Spider</category>
      
      <category>Scrapy</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ImagesPipeline</title>
    <link href="/2023/10/02/Python/Spider/Scrapy/ImagesPipeline/"/>
    <url>/2023/10/02/Python/Spider/Scrapy/ImagesPipeline/</url>
    
    <content type="html"><![CDATA[<h1 id="基于scrapy">1 基于scrapy</h1><ul><li>字符串：只需要基于xpath进行解析，提交管道进行持久化存储</li><li>图片：xpath解析出图片src属性值，再单独对该地址发送请求获取图片二进制类型的数据</li></ul><h1 id="imagespipeline">2 ImagesPipeline</h1><ul><li><p>只需解析出图片src属性值，提交给管道，管道就会对该地址进行请求并获得二进制响应数据</p></li><li><p>使用流程：</p><ul><li><p>数据解析（图片地址）</p></li><li><p>将item提交到管道</p></li><li><p>重写一个基于ImagesPipeline的一个管道类</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># pipelines.py</span><br><span class="hljs-keyword">from</span> scrapy.pipelines.images <span class="hljs-keyword">import</span> ImagesPipeline<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">imgsPipeline</span>(<span class="hljs-title class_ inherited__">ImagesPipeline</span>):<br>    <span class="hljs-comment"># 根据图片地址进行图片数据的请求</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get_media_requests</span>(<span class="hljs-params">self, item, info</span>):<br>        <span class="hljs-keyword">yield</span> scrapy.Request(item[<span class="hljs-string">&#x27;src&#x27;</span>])<br><br>    <span class="hljs-comment"># 指定图片存储的路径</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">file_path</span>(<span class="hljs-params">self, request, response=<span class="hljs-literal">None</span>, info=<span class="hljs-literal">None</span>, *, item=<span class="hljs-literal">None</span></span>):<br>        imgName=request.url.split(<span class="hljs-string">&#x27;/&#x27;</span>)[-<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">return</span> imgName<br><br>    <span class="hljs-comment"># 返回给下一个将要执行的管道</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">item_completed</span>(<span class="hljs-params">self, results, item, info</span>):<br>        <span class="hljs-keyword">return</span> item<br><br></code></pre></td></tr></table></figure></li><li><p>配置文件：指定图片存储位置(<code>IMAGES_STORE = ''</code>)；开启管道</p></li></ul></li></ul><h1 id="图片懒加载">3 图片懒加载</h1><ul><li>懒加载，即延迟加载(Lazyload)。简单来说就是一个长页面中需要展示很多图像的时候，如果在进入页面的时候一次性把所有图片加载完，需要很长的时间。为了提升用户体验，我们使用懒加载，当图片出现在浏览器可视区域时，才加载图片。</li><li>遇到此类情况，进行数据解析时需要使用伪属性</li></ul>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Spider</category>
      
      <category>Scrapy</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>请求传参</title>
    <link href="/2023/10/01/Python/Spider/Scrapy/%E8%AF%B7%E6%B1%82%E4%BC%A0%E5%8F%82/"/>
    <url>/2023/10/01/Python/Spider/Scrapy/%E8%AF%B7%E6%B1%82%E4%BC%A0%E5%8F%82/</url>
    
    <content type="html"><![CDATA[<h1 id="使用场景">1 使用场景</h1><p>爬取解析的数据不在同一张页面中</p><h1 id="使用流程">2 使用流程</h1><ul><li>请求传参传的是item的对象</li><li><code>meta=&#123;'item':item&#125;</code>，可以将meta字典传递给请求对应的回调函数</li><li>回调函数接收item：<code>item=response.meta['item']</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BossSpider</span>(scrapy.Spider):<br>  name = <span class="hljs-string">&quot;boss&quot;</span><br>  <span class="hljs-comment"># allowed_domains = [&quot;zhipin.com&quot;]</span><br>  start_urls = [<span class="hljs-string">&quot;https://699pic.com/tupian/264659-1.html&quot;</span>]<br>  url=<span class="hljs-string">&quot;https://699pic.com/tupian/264659-%d.html&quot;</span><br>  page_num=<span class="hljs-number">2</span><br><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">parse</span>(<span class="hljs-params">self, response</span>):<br>      li_list=response.xpath(<span class="hljs-string">&#x27;//*[@id=&quot;wrapper&quot;]/div[4]/div/div&#x27;</span>)<br>      <span class="hljs-comment"># print(li_list)</span><br>      <span class="hljs-keyword">for</span> li <span class="hljs-keyword">in</span> li_list:<br>          pic_name=li.xpath(<span class="hljs-string">&#x27;./a/@title&#x27;</span>).get()<br>          pic_id_url=<span class="hljs-string">&quot;https://&quot;</span>+li.xpath(<span class="hljs-string">&#x27;./a/@href&#x27;</span>).get()<br>          item=BossproItem()<br>          item[<span class="hljs-string">&#x27;pic_name&#x27;</span>]=pic_name<br>          <span class="hljs-comment"># ！！！手动发送请求，meta请求传参</span><br>          <span class="hljs-keyword">yield</span> scrapy.Request(url=pic_id_url,callback=self.parse_detail,meta=&#123;<span class="hljs-string">&#x27;item&#x27;</span>:item&#125;)<br><br>      <span class="hljs-keyword">if</span> self.page_num &lt;= <span class="hljs-number">3</span>:<br>          new_url=<span class="hljs-built_in">format</span>(self.url%self.page_num)<br>          self.page_num+=<span class="hljs-number">1</span><br>          <span class="hljs-keyword">yield</span> scrapy.Request(url=new_url,callback=self.parse)<br><br><br>  <span class="hljs-keyword">def</span> <span class="hljs-title function_">parse_detail</span>(<span class="hljs-params">self,response</span>):<br>      <span class="hljs-comment"># 回调函数接收item</span><br>      item=response.meta[<span class="hljs-string">&#x27;item&#x27;</span>]<br>      <span class="hljs-comment"># print(item[&#x27;pic_name&#x27;])</span><br>      pic_id=response.xpath(<span class="hljs-string">&#x27;/html/body/div[12]/div[2]/div[1]/div/div[1]/div[1]/h1/span[2]/text()&#x27;</span>).get()<br>      item[<span class="hljs-string">&#x27;pic_id&#x27;</span>]=pic_id<br>      <span class="hljs-keyword">yield</span> item<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Spider</category>
      
      <category>Scrapy</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>报错：unable to access &#39;xxxxx.git&#39; Recv failure Connection was reset</title>
    <link href="/2023/09/30/Git/%E6%8A%A5%E9%94%99%EF%BC%9Aunable%20to%20access%20&#39;xxxxx.git&#39;%20Recv%20failure%20Connection%20was%20reset/"/>
    <url>/2023/09/30/Git/%E6%8A%A5%E9%94%99%EF%BC%9Aunable%20to%20access%20&#39;xxxxx.git&#39;%20Recv%20failure%20Connection%20was%20reset/</url>
    
    <content type="html"><![CDATA[<h1 id="报错信息">1 报错信息</h1><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309302011809.png"alt="image-20230930200808727" /><figcaption aria-hidden="true">image-20230930200808727</figcaption></figure><h1 id="解决方案">2 解决方案</h1><ul><li><p>报错原因：开启了代理，所以端口不对无法连接</p></li><li><p>解决：</p><ol type="1"><li><p>查看代理使用端口，如7890</p></li><li><p>配置git</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># xxxx为端口号</span><br>git config --global http.proxy http://127.0.0.1:xxxx<br></code></pre></td></tr></table></figure></li></ol></li></ul>]]></content>
    
    
    <categories>
      
      <category>Git</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Scrapy持久化存储</title>
    <link href="/2023/09/30/Python/Spider/Scrapy/Scrapy%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8/"/>
    <url>/2023/09/30/Python/Spider/Scrapy/Scrapy%E6%8C%81%E4%B9%85%E5%8C%96%E5%AD%98%E5%82%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="基于终端指令">1 基于终端指令</h1><ul><li>要求：只可以将parse方法的返回值存储到本地的文本文件</li><li>指令：<code>scrapy crawl spiderName -o filePath</code></li><li>注意：<ul><li>需在项目根目录下执行该命令</li><li>支持的文件格式：'json', 'jsonlines', 'jsonl', 'jl', 'csv', 'xml','marshal', 'pickle'</li></ul></li><li>优点：简介高效便捷</li><li>局限性较强（文件类型有限制）</li></ul><h1 id="基于管道">2 基于管道</h1><ul><li>编码流程：<ol type="1"><li>数据解析</li><li>item类中定义相关属性</li><li>将解析的数据封装为item类型的对象</li><li>提交item类型的对象给管道（先给优先级最高的管道，管道内依次传递），进行持久化存储</li><li>process_item对item类型对象进行处理</li><li>配置文件中开启管道</li></ol></li><li>优点：通用性强</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 爬虫文件</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">parse</span>(<span class="hljs-params">self, response</span>):<br>li_list = response.xpath(<span class="hljs-string">&quot;/html/body/div[8]/ul/li&quot;</span>)<br>            <span class="hljs-keyword">for</span> li <span class="hljs-keyword">in</span> li_list:<br>            name = li.xpath(<span class="hljs-string">&quot;./a/b/text()&quot;</span>).extract_first()  <span class="hljs-comment"># extract_first()提取第一项，没有则返回None</span><br>            category = li.xpath(<span class="hljs-string">&quot;./em/a/text()&quot;</span>).extract_first()<br>            time = li.xpath(<span class="hljs-string">&quot;./em/text()&quot;</span>).extract_first()<br>            <span class="hljs-comment"># 创建item对象</span><br>            item=GameItem()<br>            item[<span class="hljs-string">&#x27;name&#x27;</span>]=name<br>            item[<span class="hljs-string">&#x27;category&#x27;</span>]=category<br>            item[<span class="hljs-string">&#x27;time&#x27;</span>]=time<br>            <span class="hljs-comment"># 向管道提交item</span><br>            <span class="hljs-keyword">yield</span> item<br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># pipelines.py</span><br><span class="hljs-comment"># 数据库存储</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MySQLPipeline</span>:<br>    coon=<span class="hljs-literal">None</span><br>    cursor=<span class="hljs-literal">None</span><br><br>    <span class="hljs-comment"># 重写父类方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">open_spider</span>(<span class="hljs-params">self, item</span>):        self.coon=pymysql.Connect(host=<span class="hljs-string">&#x27;127.0.0.1&#x27;</span>,port=<span class="hljs-number">3306</span>,user=<span class="hljs-string">&#x27;root&#x27;</span>,password=<span class="hljs-string">&quot;20030227XKY&quot;</span>,db=<span class="hljs-string">&quot;spider_learning&quot;</span>,charset=<span class="hljs-string">&quot;utf8mb4&quot;</span>)<br><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">process_item</span>(<span class="hljs-params">self, item, spider</span>):<br>        self.cursor=self.coon.cursor()<br>        <span class="hljs-keyword">try</span>:<br>            self.cursor.execute(<span class="hljs-string">&#x27;insert into game_info values(&quot;%s&quot;,&quot;%s&quot;,&quot;%s&quot;,&quot;%s&quot;)&#x27;</span>%(item[<span class="hljs-string">&#x27;name&#x27;</span>],item[<span class="hljs-string">&#x27;category&#x27;</span>],item[<span class="hljs-string">&#x27;time&#x27;</span>],item[<span class="hljs-string">&#x27;test&#x27;</span>]))<br>            self.coon.commit()<br><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(e)<br>            self.coon.rollback()<br><br>        <span class="hljs-keyword">return</span> item  <span class="hljs-comment"># 传递给下一个管道</span><br><br>    <span class="hljs-comment"># 重写父类方法</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">close_spider</span>(<span class="hljs-params">self, item</span>):<br>        self.cursor.close()<br>        self.coon.close()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Spider</category>
      
      <category>Scrapy</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Scrapy基本使用与介绍</title>
    <link href="/2023/09/29/Python/Spider/Scrapy/Scrapy%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E4%B8%8E%E4%BB%8B%E7%BB%8D/"/>
    <url>/2023/09/29/Python/Spider/Scrapy/Scrapy%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E4%B8%8E%E4%BB%8B%E7%BB%8D/</url>
    
    <content type="html"><![CDATA[<h1 id="爬虫工程化">1 爬虫工程化</h1><p>对爬虫的功能进行模块化开发，从而达到可以批量生产的效果。</p><h1 id="scrapy简介">2 Scrapy简介</h1><p>Scrapy是一个快速、高效率的网络爬虫框架，用于抓取web站点并从页面中提取结构化的数据。Scrapy被广泛用于数据挖掘、监测和自动化测试。</p><p>官方文档：<ahref="https://docs.scrapy.org/en/latest/index.html">Scrapy 2.11documentation — Scrapy 2.11.0 documentation</a></p><h1 id="scrapy工作流程">3 Scrapy工作流程</h1><p><strong>基本爬虫工作流程：</strong></p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309291201611.png"alt="image-20230929093956527" /><figcaption aria-hidden="true">image-20230929093956527</figcaption></figure><p><strong>Scrapy框架工作流程：</strong></p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309291201612.png"alt="image-20230929093846194" /><figcaption aria-hidden="true">image-20230929093846194</figcaption></figure><ol type="1"><li>引擎：用来处理整个系统的数据流，触发事务。（核心）</li><li>spider（将url封装成request对象，发送给scheduler）</li><li>scheduler（得到request对象，进行过滤，压入队列，发送给downloader）</li><li>downloader（发送请求，将响应封装成response对象，传递给spider）</li><li>spider（进行数据解析）注：若还需要继续爬取，则重复前面几个步骤</li><li>pipeline（数据持久化存储）</li><li>下载器中间件、爬虫中间件</li></ol><h1 id="scrapy安装">4 Scrapy安装</h1><p>使用Anaconda Navigator创建虚拟环境，导入Scrapy包。</p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309291201614.png"alt="image-20230929100319426" /><figcaption aria-hidden="true">image-20230929100319426</figcaption></figure><p>若终端能打印版本号，则说明已安装成功。</p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309291201615.png"alt="image-20230929100251091" /><figcaption aria-hidden="true">image-20230929100251091</figcaption></figure><h1 id="scrapy实例">5 Scrapy实例</h1><h2 id="创建项目">5.1 创建项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># projectName自取，后续操作均在生成的项目根目录下进行</span><br>scrapy startproject projectName<br></code></pre></td></tr></table></figure><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309291201616.png"alt="image-20230929101145588" /><figcaption aria-hidden="true">image-20230929101145588</figcaption></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 查看项目根目录下目录结构</span><br>tree /f<br></code></pre></td></tr></table></figure><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309291201617.png"alt="image-20230929102306107" /><figcaption aria-hidden="true">image-20230929102306107</figcaption></figure><h2 id="生成爬虫">5.2 生成爬虫</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># spiderName,allowed_domains按需设置</span><br>scrapy genspider spiderName allowed_domains<br></code></pre></td></tr></table></figure><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309291201618.png"alt="image-20230929103444499" /><figcaption aria-hidden="true">image-20230929103444499</figcaption></figure><h2 id="运行项目">5.3 运行项目</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># spiderName为前面设置的爬虫名字</span><br>scrapy crawl spiderName<br></code></pre></td></tr></table></figure><h2 id="配置项目">5.4 配置项目</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># settings.py</span><br><br><span class="hljs-comment"># UA伪装，默认没有开启</span><br>USER_AGENT = <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/117.0.0.0 Safari/537.36 Edg/117.0.2045.43&quot;</span><br><br><span class="hljs-comment"># 修改值为False，不遵从robots协议，默认值为Ture</span><br>ROBOTSTXT_OBEY = <span class="hljs-literal">False</span><br><br><span class="hljs-comment"># 设置日志级别：DEBUG、INFO、WARNING、ERROR、CRITCAL</span><br><span class="hljs-comment"># 需要自己在配置文件中添加</span><br>LOG_LEVEL = <span class="hljs-string">&quot;WARNING&quot;</span><br><br><span class="hljs-comment"># 开启管道，默认被注释</span><br><span class="hljs-comment"># key 管道路径</span><br><span class="hljs-comment"># value 管道优先级（数字越小，优先级越高）</span><br>ITEM_PIPELINES = &#123;<br>   <span class="hljs-string">&quot;game.pipelines.GamePipeline&quot;</span>: <span class="hljs-number">300</span>,<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="基本流程">6 基本流程</h1><ol type="1"><li>创建项目</li><li>进入项目根目录</li><li>创建爬虫</li><li>修改start_urls</li><li>编写parse(self, response)<ul><li>默认xpath()返回Selector对象，需要进行数据提取。注意：<strong>xpath中不能有tbody标签</strong><ul><li>extract()：返回列表</li><li>extract_first()：返回第一个数据</li></ul></li><li>yield item</li></ul></li><li>在pipeline中完成数据存储</li><li>配置文件中启用管道</li><li>运行爬虫</li></ol>]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
      <category>Spider</category>
      
      <category>Scrapy</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CH3-口令攻击</title>
    <link href="/2023/09/28/%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2%E6%8A%80%E6%9C%AF/%E7%90%86%E8%AE%BA%E7%AF%87/03%E5%8F%A3%E4%BB%A4%E6%94%BB%E5%87%BB/"/>
    <url>/2023/09/28/%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2%E6%8A%80%E6%9C%AF/%E7%90%86%E8%AE%BA%E7%AF%87/03%E5%8F%A3%E4%BB%A4%E6%94%BB%E5%87%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="概述">3.1 概述</h1><h2 id="口令和身份认证">3.1.1 口令和身份认证</h2><ul><li><p>身份认证：用户向计算机系统以一种安全的方式提交自己的身份证明，然后由系统确认用户的身份是否属实，最终拒绝用户或者赋予用户一定的权限。</p></li><li><p>口令认证是身份认证的一种手段。</p></li><li><p>其他认证方式：磁卡或者智能卡认证、基于人的生理特征认证、基于地理位置的认证 。</p></li><li><p>认证过程：</p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309281533483.png"alt="image-20230928144139441" /><figcaption aria-hidden="true">image-20230928144139441</figcaption></figure></li></ul><h2 id="口令攻击的分类">3.1.2 口令攻击的分类</h2><ul><li>口令分类：<ul><li>静态口令</li><li>动态口令：加入不确定因子进行散列</li></ul></li><li>口令攻击分类：<ul><li>针对口令强度的攻击</li><li>针对口令存储的攻击：文件、缓存、数据库</li><li>针对口令传输的攻击：在口令认证交互过程中，利用网络监听非法得到用户传送的口令</li></ul></li></ul><h1 id="针对口令强度的攻击">3.2 针对口令强度的攻击</h1><h2 id="强口令与弱口令">3.2.1 强口令与弱口令</h2><ul><li>较为安全的口令应该不容易被发现规律，并且有足够的长度。</li><li>对长度的要求随应用环境的不同而不同，应该使得攻击者在某个时间段内很难破解</li></ul><h2 id="针对口令强度的攻击-1">3.2.2 针对口令强度的攻击</h2><ul><li><p>强力攻击：穷举法</p></li><li><p>字典攻击：将使用概率较高的口令集中存放在字典文件中，通过不同的变异规则生成猜测字典。强力攻击的进阶版。</p></li><li><p>组合攻击：强力攻击+字典攻击。如：字典单词尾部串接任意个字母和数字。</p></li><li><p>撞库攻击：攻击者通过收集在网络上已泄露的用户名、口令等信息，之后用这些账号和口令尝试批量登录其他网站，最终得到可以登录这些网站的用户账号和口令。一般流程：拖库→洗库→撞库。</p></li><li><p>彩虹表破解：指拿着获取到的hash值通过查询彩虹表找出其原始值的攻击方式。狭义上，彩虹表一般是指以“hash值:原始值”为行组成的文件，如下图所示。</p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309281533484.png"alt="img" /><figcaption aria-hidden="true">img</figcaption></figure></li></ul><h1 id="针对口令存储的攻击">3.3 针对口令存储的攻击</h1><ul><li><p>不同系统的口令存储位置不同，有些存放在文件中，比如Linux系统的Shadow文件，Windows系统的SAM文件；有些存放在数据库中，比如Oracle数据库账户文件；有些则存放在注册表中，比如Windows平台下的许多应用软件。另外，在身份验证程序运行时，还会将口令或口令的密文加载到内存中，方便进行比较。</p></li><li><p>Linux shadow文件：</p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309281535352.png"alt="image-20230928153443475" /><figcaption aria-hidden="true">image-20230928153443475</figcaption></figure></li><li><p>salt用途：使用salt时，相同的输入可能导致不同的散列。密码散列=单向散列循环（密码||随机字符串）。可以防止字典攻击、彩虹表攻击。</p></li></ul><h1 id="针对口令传输的攻击">3.4 针对口令传输的攻击</h1><h2 id="口令嗅探">3.4.1 口令嗅探</h2><ul><li>如果主机B处于主机A和FTP通信的信道上，就可以“窃听到”合法的用户名及口令。</li><li>802.3以太网是一种使用广播信道的网络，在以太网中所有通信都是广播的。</li><li>网卡侦听模式：<ul><li>广播模式</li><li>组播模式</li><li>普通模式</li><li><strong>混杂模式</strong></li></ul></li></ul><h2 id="键盘记录">3.4.2 键盘记录</h2><ul><li>硬件截获：修改主机的键盘接口。</li><li>软件截获：监视操作系统处理键盘输入的接口，将来自键盘的数据记录下来。</li></ul><h2 id="网络钓鱼">3.4.3 网络钓鱼</h2><p>“网络钓鱼（Phishing）”就是攻击者利用欺骗性的电子邮件和伪造的Web站点，骗取用户输入口令以及其他身份敏感信息。</p><h2 id="重放攻击">3.4.4 重放攻击</h2><ul><li>指攻击者记录下当前的通讯流量，以后在适当的时候重发给通讯的某一方，达到欺骗的目的。</li><li>分类：简单重放、反向重放。</li></ul><p>参考教程：</p><ol type="1"><li>https://www.cnblogs.com/lsdb/p/10038835.html</li></ol>]]></content>
    
    
    <categories>
      
      <category>网络攻防技术</category>
      
      <category>理论篇</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Nmap扫描工具基础</title>
    <link href="/2023/09/28/%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2%E6%8A%80%E6%9C%AF/%E5%AE%9E%E9%AA%8C%E7%AF%87/Nmap%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/09/28/%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2%E6%8A%80%E6%9C%AF/%E5%AE%9E%E9%AA%8C%E7%AF%87/Nmap%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="简介">1 简介</h1><h2 id="概述">1.1 概述</h2><p><code>Nmap</code>（“ Network Mapper”）是一个用于网络探测和安全审计的开源工具。它被设计用于快速扫描大型网络，尽管它对于单个主机也能正常工作。<code>Nmap</code>以新颖的方式使用原始<code>IP</code>数据包来确定网络上可用的主机、这些主机提供的服务（应用程序名称和版本）、它们运行的操作系统及其版本、正在使用中的数据包过滤器/防火墙的类型，以及数十个其他特性。</p><h2 id="功能">1.2 功能</h2><ul><li>主机发现</li><li>端口扫描</li><li>服务和版本检测</li><li>推断主机所用的操作系统</li></ul><h2 id="常见用法">1.3 常见用法</h2><ul><li><p><code>-iL</code> <inputfilename>(从列表中输入)：可将文件中的一堆主机名或地址读取出来进行扫描。</p></li><li><p><code>-iR</code> <hostnum>(随机选择目标)：可以指定随机生成多少个<code>IP</code>地址。如果为0，意味着无休止的扫描。</p></li><li><p><code>–exclude</code>：可以排除多个不需要扫描的主机。</p></li><li><p><code>–excludfile</code> <excludefile>(排除文件中的列表)：排除文件中的主机列表</p></li></ul><h2 id="时序">1.4 时序</h2><ul><li>-T0 偏执的：非常非常慢，用于IDS逃逸</li><li>-T1 猥琐的：相当慢，用于IDS逃逸</li><li>-T2 有礼貌的：降低速度以消耗更小的带宽，比默认慢十倍</li><li>-T3 普通的：默认，根据目标的反应自动调整时间模式</li><li>-T4 野蛮的：假定处在一个很好的网络环境，请求可能会淹没目标</li><li>-T5 疯狂的：非常野蛮，很可能会淹没目标端口或是漏掉一些开放端口</li></ul><h1 id="主机发现">2 主机发现</h1><p><code>Nmap</code>会根据当前扫描的网络来改变它的扫描方式：</p><ul><li>本地网络发送 <code>ARP</code>数据包；</li><li>非本地网路依次发送：A) <code>ICMP echo</code>请求；B)<code>TCP SYN</code> 到端口 443；C) <code>TCP ACK</code>到端口 80；D)<code>ICMP timestap</code>请求。</li></ul><h2 id="sl列表扫描">2.1 -sL(列表扫描)</h2><p>列表扫描是主机发现的一种退化形式，它仅列出指定网络的每个主机，而不向目标主机发送任何数据包，即<strong>不进行主机发现</strong>。默认情况下，<code>Nmap</code>仍然在主机上执行<code>反向 DNS 解析</code>（<code>IP</code>→<code>域名</code>）以了解其名称。<code>Nmap</code>还在末尾报告<code>IP</code>地址的总数。由于这个想法是简单地打印目标主机列表，因此端口扫描、操作系统检测或主机发现等更高级别功能的选项不能与此结合。</p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309281048776.png"alt="image-20230924112236211" /><figcaption aria-hidden="true">image-20230924112236211</figcaption></figure><h2 id="sn无端口扫描">2.2 -sn(无端口扫描)</h2><p>该选项告诉<code>Nmap</code>在主机发现后不要进行端口扫描，而只打印出响应主机发现探测的可用主机。默认情况下，完成的默认主机发现<code>-sn</code>由<code>ICMP</code> 回显请求、端口 443 的<code>TCP SYN</code>、端口 80的<code>TCP ACK</code>以及<code>ICMP</code>时间戳请求组成。当由非特权用户执行时，仅将 SYN数据包发送（使用调用<code>connect</code>）到目标上的端口 80 和443。当特权用户尝试扫描本地以太网上的目标时，除非<code>--send-ip</code>指定，否则将使用<code>ARP</code>请求。该<code>-sn</code>选项可以与任何发现探测类型（<code>-P*</code>选项）以获得更大的灵活性。如果使用任何这些探测类型和端口号选项，则默认探测将被覆盖。当运行<code>Nmap</code>的源主机和目标网络之间存在严格的防火墙时，建议使用这些高级技术。否则，当防火墙丢弃探测或其响应时，主机可能会丢失。只利用ping扫描进行主机发现，不扫描目标主机的端口。在<code>Nmap</code>的早期版本中，<code>-sn</code>被称为<code>-sP</code>。·</p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309281048778.png"alt="image-20230924114006070" /><figcaption aria-hidden="true">image-20230924114006070</figcaption></figure><h2 id="pn无-ping">2.3 -Pn(无 ping)</h2><p>该选项完全跳过主机发现阶段。通常情况下，<code>Nmap</code>使用此阶段来确定活动机器，以便进行更大规模的扫描，并衡量网络速度。与列表扫描一样，会跳过正确的主机发现，但<code>Nmap</code>不会停止并打印目标列表，而是继续执行请求的功能，就好像每个目标<code>IP</code>都处于活动状态一样。默认情况下，<code>Nmap</code>只对发现运行的主机执行重型探测，如端口扫描、版本检测或操作系统检测。对于本地以太网上的机器，仍然会执行<code>ARP</code> 扫描（除非指定<code>--disable-arp-ping</code>或<code>--send-ip</code>），因为<code>Nmap</code>需要 MAC 地址来进一步扫描目标主机。在<code>Nmap</code>的早期版本中，<code>-Pn</code>是 <code>-P0</code> 和<code>-PN</code>。</p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309281048779.png"alt="image-20230925152253035" /><figcaption aria-hidden="true">image-20230925152253035</figcaption></figure><h2 id="ps-tcp-syn-ping">2.4 -PS <port list>(TCP SYN Ping)</h2><p>该选项会发送一个设置了<code>SYN</code>标志的空 TCP数据包。默认目标端口为 80。SYN标志向远程系统表明，您正试图建立连接。通常情况下，目标端口会被关闭，并回发一个<code>RST</code>（重置）数据包。如果端口碰巧是开放的，目标系统将采取TCP 三方握手的第二步，回应一个 <code>SYN/ACK</code> TCP数据包。然后，运行 <code>Nmap</code> 的机器会以 <code>RST</code>回应，而不是发送 <code>ACK</code>数据包（<code>ACK</code>数据包将完成三方握手并建立完整连接）来破坏新生连接。<code>Nmap</code>不关心端口是打开还是关闭。前面讨论的 <code>RST</code> 或<code>SYN/ACK</code>响应告诉 <code>Nmap</code>主机可用且有响应。注意：-PS和端口列表间无空格。</p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309281048780.png"alt="image-20230925152824970" /><figcaption aria-hidden="true">image-20230925152824970</figcaption></figure><h2 id="pa-tcp-ack-ping">2.5 -PA <port list>(TCP ACK Ping)</h2><p><code>TCP ACK ping</code> 与刚才讨论的 SYN ping非常相似。两者的区别在于设置的是 <code>TCP ACK</code> 标志，而不是<code>SYN</code>标志。同时提供<code>SYN</code> 和 <code>ACK</code>ping探测的原因是为了最大限度地绕过防火墙。该<code>-PA</code>选项使用与 SYN探测 (80) 相同的默认端口，并且还可以采用相同格式的目标端口列表。这种<code>ACK</code>数据包声称通过已建立的 TCP连接确认数据，但实际上并不存在这样的连接。因此，远程主机应始终响应一个<code>RST</code>数据包，在此过程中暴露自己的存在。</p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309281048781.png"alt="image-20230925153349280" /><figcaption aria-hidden="true">image-20230925153349280</figcaption></figure><h2 id="pu-udp-ping">2.6 -PU <port list> (UDP Ping)</h2><p>该方法会向指定端口发送<code>UDP</code>数据包。对于大多数端口，数据包都是空的，但有些端口会使用特定协议的有效载荷，这样更有可能得到响应。端口列表的格式与前面讨论过的-PS 和 -PA 选项相同。如果没有指定端口，默认值为40125。默认情况下使用的是一个非常不常用的端口，因为对于这种特殊的扫描类型来说，向开放端口发送数据通常是不可取的。一旦命中中目标计算机上的一个关闭端口，<code>UDP</code>探测器应返回一个 <code>ICMP</code>端口不可达数据包。这就向<code>Nmap</code>表明机器是正常运行的。许多其他类型的<code>ICMP</code>错误，如主机/网络不可到达或超过TTL，都表明主机已停机或不可到达。无响应也可以这样解释。如果到达的是开放端口，大多数服务会直接忽略空数据包，不返回任何响应。这就是默认探测端口为40125 的原因，该端口被使用的可能性很小。字符生成器<code>chargen</code>协议等少数服务会响应空 <code>UDP</code>数据包，从而向 <code>Nmap</code> 透露机器可用。</p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309281048782.png"alt="image-20230925153850582" /><figcaption aria-hidden="true">image-20230925153850582</figcaption></figure><h2 id="py-sctp-init-ping">2.7 -PY <port list> (SCTP INIT Ping)</h2><p>该选项发送包含最小<code>INIT</code> 块的 <code>SCTP</code>数据包。<code>INIT</code>块向远程系统表明，您正试图建立关联。通常情况下，目标端口关闭，并将发送一个<code>ABORT</code> 块。如果端口碰巧是开放的，目标系统将采取<code>SCTP</code>四次握手的第二步，用一个 <code>INIT-ACK</code> chunk作为回应。如果运行 <code>Nmap</code>的机器有一个功能正常的<code>SCTP</code>协议栈，那么它就会通过响应一个<code>ABORT</code>数据块而不是发送一个<code>COOKIE-ECHO</code>数据块（这将是四路握手的下一步）来破坏连接。<code>ABORT</code>包由运行<code>Nmap</code>的机器内核发送，以响应意外的<code>INIT-ACK</code>，而不是由<code>Nmap</code> 本身发送。前面讨论过的<code>ABORT</code>或<code>INIT-ACK</code> 响应都会告诉<code>Nmap</code>，主机是可用的并有响应。</p><h2 id="pe--pp--pm-icmp-ping-types">2.8 -PE; -PP; -PM (ICMP PingTypes)</h2><p><code>Nmap</code> 向目标<code>IP</code>地址发送<code>ICMP</code>类型8（回显请求）数据包，期望从可用主机返回类型 0（回显应答）。不幸的是，对于网络浏览器来说，许多主机和防火墙现在会阻止这些数据包，而不是按照RFC1122 的要求进行响应。 因此，针对 Internet 上的未知目标，仅<code>ICMP</code>扫描很少足够可靠。但对于监控内部网络的系统管理员来说，它们可能是一种实用且有效的方法。使用该-PE选项启用此回显请求行为。<code>ICMP</code>标准（RFC792 和 RFC 950）还将时间戳请求、信息请求和地址掩码请求数据包分别指定为代码 13、15 和17。时间戳和地址掩码查询可以分别使用 -PP和-PM选项发送。</p><h2 id="po-ip-协议-ping">2.9 -PO <protocol list>(IP 协议 Ping)</h2><p><code>IP</code>协议 ping 是较新的主机发现选项之一，它发送的<code>IP</code>数据包在其 <code>IP</code>头中设置了指定的协议号。协议列表的格式与前面讨论的<code>TCP</code>、<code>UDP</code>和 <code>SCTP</code>主机发现选项中的端口列表相同。此主机发现方法查找使用与探针相同的协议的响应，或者查找表示目标主机不支持给定协议的<code>ICMP</code>协议不可达消息。无论哪种类型的响应都表明目标主机存活。</p><h2 id="prarp-ping">2.10 -PR(ARP Ping)</h2><p>当启动<code>Namp</code>主机发现时候，<code>Nmap</code>会对目标地址参数进行检查，如果与自身<code>IP</code>地址匹配到同一个子网内，<code>Nmap</code>会对该类目标采用<code>ARP</code>协议进行探测。即使命令参数规定的是其他探测手段，也会先使用<code>ARP</code>进行探测。这种方式效率高，速度快，但仅限于同一子网广播域中。<code>ARP</code>（AddressResolutionProtocol，地址解析协议）是用来将<code>IP</code>地址解析为<code>MAC</code>地址的协议。主机或三层网络设备上会维护一张<code>ARP</code>表，用于存储<code>IP</code>地址和<code>MAC</code>地址的映射关系，一般<code>ARP</code>表项包括动态<code>ARP</code>表项和静态<code>ARP</code>表项。</p><h2 id="disable-arp-ping-no-arp-or-nd-ping">2.11 --disable-arp-ping (NoARP or ND Ping)</h2><p><code>Nmap</code> 通常会发现本地连接的以太网主机的 <code>ARP</code>或 <code>IPv6</code>邻居发现 (ND)，即使使用了 <code>-Pn</code>或<code>-PE</code>等其他主机发现选项。要禁用这种隐式行为，请使用<code>--disable-arp-ping</code>选项。</p><h2 id="discovery-ignore-rst">2.12 --discovery-ignore-rst</h2><p>在某些情况下，防火墙可能会欺骗 <code>TCP</code> 重置(<code>RST</code>) 回复，以响应对未占用或不允许的地址的探测。由于<code>Nmap</code>通常会将 <code>RST</code>回复视为目标已启动的证明，这可能导致浪费扫描不存在的目标的时间。使用<code>--discovery-ignore-rst</code>会阻止<code>Nmap</code>在发现主机时考虑这些回复。您可能需要选择额外的主机发现选项，以确保在这种情况下不会错过目标。</p><h2 id="traceroute跟踪主机路径">2.13 --traceroute(跟踪主机路径)</h2><p><code>Traceroute</code>的工作原理是发送TTL（生存时间）较低的数据包，试图从扫描器和目标主机之间的中间跳诱发<code>ICMP</code>时间超限信息。标准的<code>traceroute</code> 实现以 1 的 TTL 开始，并递增 TTL直到到达目标主机。<code>Nmap</code>的<code>traceroute</code>从高TTL开始，然后递减TTL，直到TTL为零。这样做可以让<code>Nmap</code>采用巧妙的缓存算法，加快对多台主机的跟踪。根据网络条件，<code>Nmap</code>平均每台主机少发送5-10 个数据包。如果扫描的是单个子网（如192.168.0.0/24），<code>Nmap</code>可能只需向大多数主机发送两个数据包。</p><h1 id="端口扫描">3 端口扫描</h1><h2 id="端口状态">3.1 端口状态</h2><ul><li><code>open</code></li><li><code>closed</code></li><li><code>filterd</code></li><li><code>unfilterd</code></li><li><code>open|unfilterd</code></li><li><code>closed|unfilterd</code></li></ul><h2 id="概述-1">3.2 概述</h2><ul><li><p>虽然 Nmap试图生成准确的结果，但请记住，它的所有见解都是基于目标机器（或它们前面的防火墙）返回的数据包。这类主机可能不值得信任，它们发送的响应会迷惑或误导Nmap。更常见的是不符合 RFC 标准的主机，它们不会对 Nmap探测作出应有的响应。FIN、NULL 和 Xmas扫描特别容易出现这种问题。</p></li><li><p>大多数扫描类型只有特权用户才能使用。这是因为发送和接收原始数据包需要Unix 系统的 root 访问权限。</p></li><li><p>本节记录了 Nmap支持的十几种端口扫描技术。一次只能使用一种方法，除了 UDP 扫描 (-sU)和任何一种 SCTP 扫描类型 (-sY, -sZ) 可以与任何一种 TCP扫描类型结合使用。为便于记忆，端口扫描类型选项的形式为 -s<C>，其中 <C>是扫描名称中的一个突出字符，通常是第一个字符。唯一的例外是已废弃的 FTP反弹扫描 (-b)。默认情况下，Nmap 执行 SYN扫描，但如果用户没有发送原始数据包的适当权限（在 Unix 上需要 root访问权限），Nmap会用连接扫描代替。在本节列出的扫描中，非特权用户只能执行连接和 FTP反弹扫描。</p></li></ul><h2 id="ss-tcp-syn-scan">3.3 <code>-sS</code> (TCP SYN scan)</h2><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309281048783.png"alt="image-20230928092641400" /><figcaption aria-hidden="true">image-20230928092641400</figcaption></figure><ul><li>半连接扫描基于TCP三次握手规则，探测服务端口是否开放。</li><li>服务端口开放，会返回 SYN/ACK 消息；如果收到 SYN 数据包（不含 ACK标志）的响应，端口也会被认为是开放的。这可能是由于一种极为罕见的 TCP功能造成的，这种功能被称为同时打开或分裂握手连接。</li><li>服务端口关闭，会返回RST消息。</li><li>如果数次重发后仍没响应，该端口就被标记为被过滤。如果收到ICMP不可到达错误(类型3，代码1，2，3，9，10，或者13)，该端口也被标记为被过滤。</li><li>优点：一般不会被目标主机的应用所记录。</li><li>缺点：运行Raw Socket时必须拥有管理员权限。</li></ul><h2 id="st-tcp-connect-scan">3.4 <code>-sT</code> (TCP connectscan)</h2><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309281048784.png"alt="image-20230928092955007" /><figcaption aria-hidden="true">image-20230928092955007</figcaption></figure><ul><li>左边为服务端，右边为客户端。</li><li>当 无法使用SYN 扫描时，TCP 连接扫描是默认的 TCP扫描类型。当用户没有原始数据包权限时就是这种情况。</li><li>Nmap 不像大多数其他扫描类型那样写入原始数据包，而是通过发出 connect系统调用，使用此 API来获取每次连接尝试的状态信息，而不是从网上读取原始数据包响应。</li><li>优点：实现简单、可以用普通用户权限执行</li><li>缺点：容易被目标应用日志所记录</li></ul><h2 id="su-udp-scans">3.5 <code>-sU</code> (UDP scans)</h2><ul><li>虽然互联网上大多数流行服务都是通过 TCP 协议运行的，但 UDP服务也被广泛部署。DNS、SNMP 和 DHCP（注册端口 53、161/162 和67/68）是最常见的三种服务。</li><li>UDP 扫描使用 -sU 选项激活。它可以与 SYN 扫描 (-sS) 等 TCP扫描类型结合使用，在同一运行过程中同时检查两种协议。</li><li>如果返回 ICMP 端口不可到达错误（类型 3，代码3），端口将被关闭。</li><li>其他 ICMP 不可到达错误（类型 3，代码 0、1、2、9、10 或13）会将端口标记为已过滤。</li><li>偶尔，服务会响应一个 UDP 数据包，证明它是开放的。</li><li>如果重传后没有收到响应，端口就会被归类为 "开放"|"已过滤"。</li><li>缺点：扫描速度慢。解决方案：并行扫描更多主机、先对常用端口进行快速扫描、从防火墙后面进行扫描，以及使用--host-timeout 跳过慢速主机。</li></ul><h2 id="sy-sctp-init-scan">3.6 <code>-sY</code> (SCTP INIT scan)</h2><ul><li>SCTP 是 TCP 和 UDP 协议的一种相对较新的替代协议，它结合了 TCP 和 UDP协议的大多数特性，并增加了新的功能，如multi-homing和multi-streaming。</li><li>这种技术通常被称为半开扫描，因为你不会打开一个完整的 SCTP关联。您发送的是 INIT块，就好像您要打开一个真正的关联，然后等待响应。</li><li>INIT-ACK 块表示端口正在监听（打开）。</li><li>ABORT 块则表示端口未监听。</li><li>如果数次重传后仍未收到响应，端口就会被标记为已被过滤。如果收到 ICMP不可到达错误（类型 3，代码 0、1、2、3、9、10 或13），端口也会被标记为已过滤。</li></ul><h2 id="sn--sf--sx-tcp-null-fin-and-xmas-scans">3.7 <code>-sN</code>;<code>-sF</code>; <code>-sX</code> (TCP NULL, FIN, and Xmas scans)</h2><ul><li>假设扫描系统遵循RFC标准，如果收到一个RST报文，该端口被认为是closed(关闭的)</li><li>没有响应则意味着端口是open|filtered(开放或者被过滤的)</li><li>如果收到ICMP不可到达错误(类型 3，代号1，2，3，9，10，或者13)，该端口就被标记为被过滤的。</li><li>优点：它们能躲过一些无状态防火墙和报文过滤路由器，不会被记录到日志</li><li>缺点：大部分系统并不遵循该标准</li><li>FIN扫描 (-sF)：只设置TCP FIN标志位。</li><li>Null扫描 (-sN)：不设置任何标志位(tcp标志头是0)</li><li>Xmas扫描 (-sX)：设置FIN，PSH，和URG标志位</li><li>除了探测报文的标志位不同，这三种扫描在行为上完全一致。</li><li>主要优势：它们可以偷偷穿过某些非状态防火墙和数据包过滤路由器。另一个优势是，这些扫描类型甚至比SYN 扫描更隐蔽。</li></ul><h2 id="sa-tcp-ack-scan">3.8 <code>-sA</code> (TCP ACK scan)</h2><ul><li>ACK 扫描探测包只设置 ACK 标志（除非使用 --scanflags）。</li><li>扫描未过滤系统时，打开和关闭的端口都会返回一个 RST 数据包。Nmap会将这些端口标记为未过滤端口，这意味着 ACK数据包可以到达这些端口，但无法确定这些端口是开放的还是关闭的。</li><li>没有响应或发送某些 ICMP 错误信息（类型 3，代码 0、1、2、3、9、10 或13）的端口会被标记为已过滤。</li></ul><h2 id="sw-tcp-window-scan">3.9 <code>-sW</code> (TCP Window scan)</h2><ul><li>窗口扫描与 ACK扫描完全相同，只是它利用某些系统的实现细节来区分开放端口和关闭端口。</li><li>在某些系统中，开放端口使用正窗口大小（即使是 RST数据包），而关闭端口的窗口大小为零。</li><li>这种扫描依赖于互联网上少数系统的实现细节，因此不能总是相信它。</li></ul><h2 id="sm-tcp-maimon-scan">3.10 <code>-sM</code> (TCP Maimon scan)</h2><ul><li>该技术与 NULL、FIN 和 Xmas 扫描完全相同，只是探针是 FIN/ACK。</li><li>根据 RFC 793（TCP），无论端口是开放还是关闭，都应该生成一个 RST数据包来响应这种探测。</li><li>不过，Uriel 注意到，如果端口是开放的，许多 BSD衍生系统会直接丢弃数据包。</li></ul><h2 id="scanflags-custom-tcp-scan">3.11 <code>--scanflags</code> (CustomTCP scan)</h2><ul><li>--scanflags 参数可以是一个数字标志值，如 9（PSH 和FIN），但使用符号名称更方便。</li><li>除了指定所需的标记外，还可以指定 TCP 扫描类型（如 -sA 或-sF）。</li></ul><h2 id="sz-sctp-cookie-echo-scan">3.12 <code>-sZ</code> (SCTP COOKIEECHO scan)</h2><ul><li>利用了 SCTP 实现应在开放端口上静默丢弃包含 COOKIE ECHO块的数据包，但在端口关闭时发送 ABORT 的事实。</li><li>这种扫描类型的优点是，它的端口扫描不像 INIT扫描那么明显。此外，非状态防火墙规则集可能会阻止 INIT 数据块，但不会阻止COOKIE ECHO 数据块。不要以为这样就能使端口扫描不可见；好的 IDS也能检测到 SCTP COOKIE ECHO 扫描。</li><li>缺点是 SCTP COOKIE ECHO扫描无法区分开放端口和过滤端口，因此在两种情况下都会出现 open|filtered状态。</li></ul><h2 id="si-idle-scan">3.13 <code>-sI</code><zombie host>[:<probeport>](idle scan)</h2><ul><li>这种先进的扫描方法允许对目标进行真正的盲 TCP端口扫描（这意味着不会从您的真实 IP地址向目标发送数据包）。相反，一种独特的侧信道攻击会利用僵尸主机上可预测的IP 碎片 ID 序列生成来收集目标机开放端口的信息。</li><li>这种扫描类型还允许绘制机器之间基于 IP 的信任关系图。</li><li>如果您想探测僵尸主机上的特定端口，以了解 IP ID的变化，您可以在僵尸主机后添加冒号和端口号。否则 Nmap 将使用默认用于 TCPping 的端口 (80)。</li></ul><h2 id="so-ip-protocol-scan">3.14 <code>-sO</code> (IP protocolscan)</h2><ul><li>IP 协议扫描允许您确定目标计算机支持哪些 IP 协议（TCP、ICMP、IGMP等）。</li><li>如果 Nmap 从目标主机收到任何协议的响应，Nmap就会将该协议标记为打开。</li><li>ICMP 协议不可到达错误（类型 3，代码2）会导致协议被标记为关闭，而端口不可到达（类型 3，代码3）会导致协议被标记为打开。</li><li>其他 ICMP 不可到达错误（类型 3，代码 0、1、9、10 或13）会导致协议被标记为已过滤（尽管它们同时证明 ICMP 是开放的）。</li><li>如果重传后仍未收到响应，则标记为协议已打开|已过滤</li></ul><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309281048785.png"alt="image-20230928100330382" /><figcaption aria-hidden="true">image-20230928100330382</figcaption></figure><h2 id="bftp-bounce-scan">3.15 <code>-b</code><FTP relay host>(FTPbounce scan)</h2><ul><li>利用FTP 服务器对其他主机进行端口扫描。只需让 FTP服务器依次向目标主机的每个感兴趣的端口发送文件即可。</li><li>错误信息将说明端口是否开放。</li><li>这是一种绕过防火墙的好方法，因为企业的 FTP服务器通常比任何旧的互联网主机更容易访问其他内部主机。</li><li>该漏洞现已基本修复。</li></ul><h1 id="服务和版本检测">4 服务和版本检测</h1><h2 id="sv-version-detection">4.1 <code>-sV</code> (Versiondetection)</h2><p>-sR 是 -sV 的别名。</p><h2 id="allports-dont-exclude-any-ports-from-version-detection">4.2<code>--allports</code> (Don't exclude any ports from versiondetection)</h2><p>默认情况下，Nmap 版本检测会跳过 TCP 9100端口，因为有些打印机会简单地打印发送到该端口的任何内容，导致几十页的HTTP GET 请求、二进制 SSL 会话请求等。</p><h2 id="version-intensity-intensity-set-version-scan-intensity">4.3<code>--version-intensity &lt;intensity&gt;</code> (Set version scanintensity)</h2><p>执行版本扫描 (-sV) 时，Nmap 会发送一系列探针，每个探针的稀有度值介于1 到 9之间。编号较低的探针对各种常见服务有效，而编号较高的探针则很少有用。强度级别规定了应使用哪些探针。数字越大，正确识别服务的可能性就越大。不过，高强度扫描需要更长的时间。强度必须在0 到 9 之间。通过 nmap-service-probes ports指令向目标端口注册探针时，无论强度级别如何，都会尝试该探针。这样可以确保DNS 探测总是针对任何开放的 53 端口，SSL 探测针对 443 端口等。</p><h2 id="version-light-enable-light-mode">4.4<code>--version-light</code> (Enable light mode)</h2><p>这是 --version-intensity 2的别名。这种轻度模式使版本扫描速度更快，但识别服务的可能性略低。</p><h2 id="version-all-try-every-single-probe">4.5<code>--version-all</code> (Try every single probe)</h2><p>--version-intensity 9 的别名，确保对每个端口都进行一次探测。</p><h2 id="version-trace-trace-version-scan-activity">4.6<code>--version-trace</code> (Trace version scan activity)</h2><p>这会导致 Nmap 打印出大量关于版本扫描正在进行的调试信息。它是--packet-trace 的子集。</p><h1 id="操作系统检测">5 操作系统检测</h1><p>Nmap 最著名的功能之一是使用 TCP/IP 堆栈指纹进行远程操作系统检测。Nmap向远程主机发送一系列 TCP 和 UDP数据包，并检查响应中的几乎每一位。在执行了数十项测试（例如 TCP ISN采样、TCP 选项支持和排序、IP ID 采样以及初始窗口大小检查）后，Nmap将结果与它的结果进行比较 <code>nmap-os-db</code> 数据库包含 2,600多个已知操作系统指纹，如果匹配则打印出操作系统详细信息。</p><h2 id="o-enable-os-detection">5.1 <code>-O</code> (Enable OSdetection)</h2><p>启用操作系统检测</p><h2 id="osscan-limit-limit-os-detection-to-promising-targets">5.2<code>--osscan-limit</code> (Limit OS detection to promisingtargets)</h2><p>如果发现至少一个打开的 TCP 端口和一个关闭的 TCP端口，操作系统检测就会有效得多。设置此选项后，Nmap甚至不会尝试对不符合此标准的主机进行操作系统检测。这可以节省大量时间，特别是在对许多主机进行-Pn 扫描时。它只在使用 -O 或 -A 请求操作系统检测时才起作用。</p><h2 id="osscan-guess---fuzzy-guess-os-detection-results">5.3<code>--osscan-guess</code>; <code>--fuzzy</code> (Guess OS detectionresults)</h2><p>允许进行近似匹配</p><h2id="max-os-tries-set-the-maximum-number-of-os-detection-tries-against-a-target">5.4<code>--max-os-tries</code> (Set the maximum number of OS detectiontries against a target)</h2><p>当 Nmap对目标执行操作系统检测但未能找到完美匹配时，它通常会重复尝试。默认情况下，如果条件有利于提交操作系统指纹，Nmap会尝试五次；如果条件不太好，Nmap 会尝试两次。</p><h1 id="nmap常用命令">6 Nmap常用命令</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 获取远程主机的系统类型及开放端口</span><br>nmap -sS -P0 -sV -O &lt; target &gt;<br><span class="hljs-comment"># 其他选项</span><br><span class="hljs-comment"># -A 同时打开操作系统指纹和版本检测</span><br><span class="hljs-comment"># -v 详细输出扫描情况.</span><br>nmap -sS -P0 -A -v &lt; target &gt;<br></code></pre></td></tr></table></figure><p>参考资料：</p><ol type="1"><li><code>Nmap</code>官方文档：https://nmap.org/book/man.html</li><li>https://cshihong.github.io/2019/09/24/nmap%E6%89%AB%E6%8F%8F%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</li><li>https://bbs.sangfor.com.cn/forum.php?mod=viewthread&amp;tid=141607</li></ol>]]></content>
    
    
    <categories>
      
      <category>网络攻防技术</category>
      
      <category>实验篇</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>MD5 Collision Attack</title>
    <link href="/2023/09/27/SEED-LABS/Cryptography/MD5-Collision-Attack/"/>
    <url>/2023/09/27/SEED-LABS/Cryptography/MD5-Collision-Attack/</url>
    
    <content type="html"><![CDATA[<h1 id="md5算法流程">1 MD5算法流程</h1><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309272032637.png"alt="MD5流程" /><figcaption aria-hidden="true">MD5流程</figcaption></figure><h1 id="实验过程">2 实验过程</h1><h2id="task1generating-two-different-files-with-the-same-md5-hash">Task1：GeneratingTwo Different Files with the Same MD5 Hash</h2><ul><li><p><strong>Question 1.</strong> If the length of your prefix file isnot multiple of 64, what is going to happen?</p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309272032639.png"alt="image-20230927195026732" /><figcaption aria-hidden="true">image-20230927195026732</figcaption></figure><ol type="1"><li><p>步骤1：生成小于64字节（或其他不是64字节倍数）的前缀文件；步骤2：指定前缀，生成两个具有相同MD5哈希值的不同文件；步骤3：检查输出文件是否相同；步骤4&amp;步骤5：分别检查每个输出文件的MD5 哈希值。</p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309272032640.png"alt="image-20230927195104857" /><figcaption aria-hidden="true">image-20230927195104857</figcaption></figure></li><li><p>发现两个输出文件不同，但它们的MD5哈希值相同。</p></li><li><p>使用十六进制编辑器软件bless对比分析两个输出文件，命令格式：<code>bless fileName</code>。结论：前64（0x40）字节使用了空字符填充；剩余部分内容大致相同，仅有少数字节不同，如下图中勾选部分。填充原因：MD5处理大小为64字节的块。</p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309272032641.png"alt="image-20230927195612726" /><figcaption aria-hidden="true">image-20230927195612726</figcaption></figure><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309272032642.png"alt="image-20230927195637940" /><figcaption aria-hidden="true">image-20230927195637940</figcaption></figure></li></ol></li></ul><p>​</p><ul><li><p><strong>Question 2.</strong> Create a prefix file with exactly 64bytes, and run the collision tool again, and see what happens.</p><ol type="1"><li><p>步骤1：生成64字节的前缀文件（末尾会有一个换行符，所以实际输入字符为63个）；步骤2：指定前缀，生成两个具有相同MD5哈希值的不同文件；步骤3：检查输出文件是否相同；步骤4：分别检查每个输出文件的MD5 哈希值。</p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309272032643.png"alt="image-20230927195753720" /><figcaption aria-hidden="true">image-20230927195753720</figcaption></figure><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309272032644.png"alt="image-20230927195811834" /><figcaption aria-hidden="true">image-20230927195811834</figcaption></figure></li><li><p>同样发现两个输出文件不同，但它们的MD5哈希值相同。</p></li><li><p>使用十六进制编辑器软件bless对比分析两个输出文件。发现此次输出文件中未进行补零；同样，前缀部分完全相同，剩余部分除部分字节外大致相同。</p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309272032645.png"alt="image-20230927195827718" /><figcaption aria-hidden="true">image-20230927195827718</figcaption></figure><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309272032646.png"alt="image-20230927195848313" /><figcaption aria-hidden="true">image-20230927195848313</figcaption></figure></li></ol></li></ul><p>​</p><ul><li><p><strong>Question 3.</strong> Are the data (128 bytes) generatedby md5collgen completely different for the two output files? Pleaseidentify all the bytes that are different.</p><p>answer：没有完全不同。Question 1中有5个字节不同，Question2中有6个字节不同。不同之处为上述图中勾画部分。</p></li></ul><h2 id="task-2-understanding-md5s-property">Task 2: Understanding MD5’sProperty</h2><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309272032647.png"alt="image-20230927200007327" /><figcaption aria-hidden="true">image-20230927200007327</figcaption></figure><ol type="1"><li><p>MD5算法属性：给定两个输入M，N如果MD5(M) =MD5(N)，那么对于任何输入T，MD5(M || T) = MD5(N ||T)。因此，将特定的suffix添加到具有相同 MD5散列的任何两个不同消息中，通过连接原始消息和suffix消息，得到两个新的更长消息，这两个消息也具有相同的MD5 散列。</p></li><li><p>步骤1：构造前缀文件；步骤2：指定前缀，生成两个具有相同 MD5哈希值的文件；步骤3：检查输出文件是否相同；步骤4：构造后缀文件；步骤5&amp;步骤6：分别使用cat命令对两个文件（生成的输出文件+后缀文件）进行拼接；步骤7：查看各个文件MD5哈希值。</p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309272032648.png"alt="image-20230927200103119" /><figcaption aria-hidden="true">image-20230927200103119</figcaption></figure></li><li><p>结论：观察得到两个具有不同内容，但MD5哈希值相同的文件，拼接上同一个后缀之后，它们的MD5哈希值仍然相同。因此，给定两个输入M，N如果MD5(M)= MD5(N)，那么对于任何输入T，MD5(M || T) = MD5(N ||T)，该属性得证。注意：拼接后缀后的哈希值与原哈希值不同。</p></li></ol><h2id="task-3-generating-two-executable-files-with-the-same-md5-hash">Task3: Generating Two Executable Files with the Same MD5 Hash</h2><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309272032649.png"alt="image-20230927200323704" /><figcaption aria-hidden="true">image-20230927200323704</figcaption></figure><ol type="1"><li><p>相关命令:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># The first command above saves the first 3200 bytes of a.out to prefix.</span><br><span class="hljs-comment"># The second command saves the last 100 bytes of a.out to suffix. </span><br><span class="hljs-comment"># The third command saves the data from the 3300th byte to the end # of the file a.out（左开右闭区间） to suffix.</span><br>$ <span class="hljs-built_in">head</span> -c 3200 a.out &gt; prefix<br>$ <span class="hljs-built_in">tail</span> -c 100 a.out &gt; suffix<br>$ <span class="hljs-built_in">tail</span> -c +3300 a.out &gt; suffix<br></code></pre></td></tr></table></figure></li><li><p>目标：创建两个 MD5 哈希值相同但输出不同的程序。</p></li><li><p>根据实验说明编写demo.c程序，并进行编译。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> xyz[<span class="hljs-number">200</span>] = &#123;<br><span class="hljs-comment">/* The actual contents of this array are up to you */</span><br>        <span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<br>        <span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<br>        <span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<br>        <span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<br>        <span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<br>        <span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<br>        <span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<br>        <span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<br>        <span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<br>        <span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<br>&#125;;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span> (i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">200</span>; i++)&#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%x&quot;</span>, xyz[i]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309272032650.png"alt="image-20230927200830144" /><figcaption aria-hidden="true">image-20230927200830144</figcaption></figure></li><li><p>使用bless查看demo.out文件，先找到数组位置，数组开始位置为0x3020，从而得到前缀结束位置：0x3040（由于0x3020不是64的倍数，需扩展到64的倍数），对应10进制数为12352。</p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309272032651.png"alt="image-20230927200915995" /><figcaption aria-hidden="true">image-20230927200915995</figcaption></figure></li><li><p>截取前缀部分，作为demo_prefix文件的输入。</p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309272032652.png"alt="image-20230927201000671" /><figcaption aria-hidden="true">image-20230927201000671</figcaption></figure></li><li><p>根据该前缀生成两个具有相同 MD5哈希值的文件(每个生成文件的最后128位是P和Q)。</p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309272032653.png"alt="image-20230927201015560" /><figcaption aria-hidden="true">image-20230927201015560</figcaption></figure></li><li><p>截取后缀部分（前缀部分+128字节开始），作为demo_suffix文件的输入。</p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309272032654.png"alt="image-20230927201030131" /><figcaption aria-hidden="true">image-20230927201030131</figcaption></figure></li><li><p>使用第四步生成的文件分别和demo_suffix进行拼接，得到demo_out1s.bin和demo_out2s.bin。</p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309272032655.png"alt="image-20230927201047554" /><figcaption aria-hidden="true">image-20230927201047554</figcaption></figure></li><li><p>步骤1得到demo_out1s.bin和demo_out2s.bin的内容不同，步骤2得到它们的哈希值相同。通过bless中对两个文件分析，发现中间128字节内容仅个别字节不同，大部分相同。</p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309272032656.png"alt="image-20230927201108023" /><figcaption aria-hidden="true">image-20230927201108023</figcaption></figure><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309272032657.png"alt="image-20230927201114742" /><figcaption aria-hidden="true">image-20230927201114742</figcaption></figure><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309272032658.png"alt="image-20230927201121256" /><figcaption aria-hidden="true">image-20230927201121256</figcaption></figure></li></ol><h2 id="task4-making-the-two-programs-behave-differently">Task4: Makingthe Two Programs Behave Differently</h2><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309272032659.png"alt="image-20230927202206700" /><figcaption aria-hidden="true">image-20230927202206700</figcaption></figure><ol type="1"><li><p>目标：生成两个行为不同，但哈希值相同的目标程序。</p></li><li><p>根据实验指导，编写task4.c程序，并进行编译。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> a[<span class="hljs-number">200</span>] = &#123;<br><span class="hljs-comment">/* The actual contents of this array are up to you */</span><br>        <span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<br>        <span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<br>        <span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<br>        <span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<br>        <span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<br>        <span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<br>        <span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<br>        <span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<br>        <span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<br>        <span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<br>&#125;;<br><span class="hljs-type">unsigned</span> <span class="hljs-type">char</span> b[<span class="hljs-number">200</span>] = &#123;<br><span class="hljs-comment">/* The actual contents of this array are up to you */</span><br>        <span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<br>        <span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<br>        <span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<br>        <span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<br>        <span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<br>        <span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<br>        <span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<br>        <span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<br>        <span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<br>        <span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-string">&#x27;A&#x27;</span>,<br>&#125;;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> flag = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>;i&lt;<span class="hljs-number">200</span>;i++)<br>    &#123;<br>        <span class="hljs-keyword">if</span>(a[i] != b[i])<br>        &#123;<br>            flag = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(flag)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;This is benign code!\n&quot;</span>);<br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;This is malicious code!\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309272032660.png"alt="image-20230927202354382" /><figcaption aria-hidden="true">image-20230927202354382</figcaption></figure></li><li><p>使用bless查看task4.out文件，先找到数组位置，第一个数组开始位置为0x3020，从而得到前缀结束位置：0x3040（由于0x3020不是64的倍数，需扩展到64的倍数），对应10进制数为12352。因此，前缀中包含了32个’A’。</p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309272032661.png"alt="image-20230927202409522" /><figcaption aria-hidden="true">image-20230927202409522</figcaption></figure></li><li><p>截取前缀部分，作为task4_prefix文件的输入。</p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309272032662.png"alt="image-20230927202421078" /><figcaption aria-hidden="true">image-20230927202421078</figcaption></figure></li><li><p>根据该前缀生成两个具有相同 MD5 哈希值的文件。</p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309272032663.png"alt="image-20230927202429531" /><figcaption aria-hidden="true">image-20230927202429531</figcaption></figure><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309272032664.png"alt="image-20230927202441720" /><figcaption aria-hidden="true">image-20230927202441720</figcaption></figure></li><li><p>从GCC处开始（0x31c8），截取剩余部分，作为task4_suffix文件的输入。</p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309272032665.png"alt="image-20230927202455398" /><figcaption aria-hidden="true">image-20230927202455398</figcaption></figure><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309272032666.png"alt="image-20230927202503922" /><figcaption aria-hidden="true">image-20230927202503922</figcaption></figure></li><li><p>把步骤4中生成的其中一个文件的后160个字节（32(字符A)+128(Padding)）截取出来，作为task4_middle文件的输入。根据代码逻辑，被选取出的文件在拼接成为一个可执行文件后，将执行善意代码，此处我们选取task4_out1.bin。</p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309272032667.png"alt="image-20230927202526131" /><figcaption aria-hidden="true">image-20230927202526131</figcaption></figure></li><li><p>数组大小为200字节，因此还需要40字节的字符串,保存至task4_0xA。并且注意到，两个数组间有24字节的0x00字符，保存至task4_str0。特别注意：python生成时会在末尾自动加上0x0A，因此我们对生成的文件进行截取。</p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309272032668.png"alt="image-20230927202538212" /><figcaption aria-hidden="true">image-20230927202538212</figcaption></figure></li><li><p>按下表方式开始进行拼接（拼接过程中要维持编译文件原有结构，但拼接方式不唯一）：</p><table><thead><tr class="header"><th>前缀输出文件</th><th>数组a补充（40字节）</th><th>间隔（24字节）</th><th>数组b主体（160字节）</th><th>数组b补充（40字节）</th><th>后缀</th></tr></thead><tbody><tr class="odd"><td>task4_out1.bin</td><td>task4_strA</td><td>task4_str0</td><td>task4_middle</td><td>task4_strA</td><td>task4_suffix</td></tr><tr class="even"><td>task4_out2.bin</td><td>task4_strA</td><td>task4_str0</td><td>task4_middle</td><td>task4_strA</td><td>task4_suffix</td></tr></tbody></table><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309272032669.png"alt="image-20230927202618655" /><figcaption aria-hidden="true">image-20230927202618655</figcaption></figure></li><li><p>分别运行两个最终文件（task4_1/task4_2），此处需要先赋予执行权限。与之前推理结果一致，task4_1执行善意代码，task4_2执行恶意代码。</p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309272032670.png"alt="image-20230927202628947" /><figcaption aria-hidden="true">image-20230927202628947</figcaption></figure><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309272032671.png"alt="image-20230927202638045" /><figcaption aria-hidden="true">image-20230927202638045</figcaption></figure></li></ol><p>参考教程：</p><ol type="1"><li><ahref="https://seanxz401.github.io/2022/12/26/网络攻防-口令攻击/#实验-MD5碰撞">网络攻防-口令攻击- Sean's Blog (seanxz401.github.io)</a></li><li>https://www.cnblogs.com/skprimin/p/16177784.html</li></ol>]]></content>
    
    
    <categories>
      
      <category>SEED-LABS</category>
      
      <category>Cryptography</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CH2-信息收集技术</title>
    <link href="/2023/09/24/%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2%E6%8A%80%E6%9C%AF/%E7%90%86%E8%AE%BA%E7%AF%87/02%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E6%8A%80%E6%9C%AF/"/>
    <url>/2023/09/24/%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2%E6%8A%80%E6%9C%AF/%E7%90%86%E8%AE%BA%E7%AF%87/02%E4%BF%A1%E6%81%AF%E6%94%B6%E9%9B%86%E6%8A%80%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="信息收集概述">2.1 信息收集概述</h1><h2 id="信息收集的内容">2.1.1 信息收集的内容</h2><ul><li>定义：信息收集是指黑客为了更加有效地实施攻击而在攻击前或攻击过程中对目标的所有探测活动</li><li>内容：域名和IP地址；操作系统类型；开放端口；提供开放端口的服务或应用程序；防火墙、入侵检测等安全防范措施</li><li>分类：<ul><li>主动：通过直接访问、扫描网站，这种将流量流经网站的行为</li><li>被动：利用第三方的服务对目标进行访问了解，比例：Google搜索</li></ul></li></ul><h2 id="信息收集的方法">2.1.2 信息收集的方法</h2><ul><li>社会工程学</li><li>技术手段：公开信息收集、网络扫描、漏洞扫描、网络拓扑检测</li></ul><h1 id="公开信息收集">2.2 公开信息收集</h1><h2 id="利用web服务">2.2.1 利用web服务</h2><ul><li><p>网站公开邮箱（结合社会工程学）</p></li><li><p>目标域名、IP地址、网站模板、网络管理员信息、公司人员名单</p></li><li><p>网络拓扑结构图</p></li></ul><h2 id="利用搜索引擎服务">2.2.2 利用搜索引擎服务</h2><ul><li><p>基本语法</p><table><thead><tr class="header"><th><strong>And</strong></th><th><strong>与</strong></th></tr></thead><tbody><tr class="odd"><td><strong>OR</strong></td><td><strong>或</strong></td></tr><tr class="even"><td><strong>+</strong></td><td><strong>强制包含搜索项</strong></td></tr><tr class="odd"><td><strong>-</strong></td><td><strong>非，去掉搜索项</strong></td></tr><tr class="even"><td><strong>“”</strong></td><td><strong>包含一个完整的语义</strong></td></tr><tr class="odd"><td><strong>.</strong></td><td><strong>单个通配符</strong></td></tr><tr class="even"><td>*****</td><td><strong>任意通配符</strong></td></tr></tbody></table></li><li><p>搜索语法</p><table><thead><tr class="header"><th><strong>site</strong></th><th><strong>搜索具体服务器或域名的网页</strong></th></tr></thead><tbody><tr class="odd"><td><strong>filetype</strong></td><td><strong>搜索特定类型的文件</strong></td></tr><tr class="even"><td><strong>intitle</strong></td><td><strong>搜索网页标题</strong></td></tr><tr class="odd"><td><strong>inurl</strong></td><td><strong>搜索URL </strong></td></tr><tr class="even"><td><strong>intext</strong></td><td><strong>搜索正文</strong></td></tr><tr class="odd"><td><strong>link</strong></td><td><strong>搜索连接到指定网页的网页</strong></td></tr></tbody></table></li><li><p>https://zhuanlan.zhihu.com/p/142832509（谷歌黑客常用搜索语句一览）</p></li><li><p>搜索引擎：https://www.shodan.io/</p></li></ul><h2 id="利用whole服务">2.2.3 利用Whole服务</h2><ul><li>功能：查看已注册域名（域名登记人信息、联系电话和邮箱、域名注册时间和更新时间、权威DNS的IP地址）</li><li>使用方法：https://whois.chinaz.com/</li></ul><h2 id="利用dns域名服务">2.2.4 利用DNS域名服务</h2><ul><li>主服务器</li><li>辅助服务器（定期进行区域传送：允许一个辅域名服务器更新自己的区域数据）</li><li>缓存服务器</li></ul><p><strong>利用思路</strong>：</p><p>如果DNS配置不当，可能造成内部主机名和IP地址对的泄漏。即主DNS服务器允许任意IP地址从该服务器进行区域传送，进而泄露信息。</p><h2 id="cdn">2.2.5 CDN</h2><p>内容分发网络<code>CDN</code>是一个互连服务器网络，可加快数据密集型应用程序的网页加载速度。<code>CDN</code>可以表示内容分发网络或内容分配网络。当用户访问某个网站时，来自该网站服务器的数据必须通过互联网传输到用户的计算机。如果用户距离该服务器较远，则加载大文件（例如视频或网站图像）将需要很长时间。相反，如果网站内容存储在距离用户较近的<code>CDN</code>服务器上，就可以更快到达他们的计算机。</p><h1 id="网络扫描">2.3 网络扫描</h1><h2 id="主机扫描">2.3.1 主机扫描</h2><h3 id="icmp扫描">2.3.1.1 ICMP扫描</h3><p><strong>ping扫描原理</strong>：</p><p>利用<code>ICMP协议</code>（响应请求/应答）进行工作</p><p><strong><code>ICMP</code>报文格式：</strong></p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309241014073.png"alt="image-20230920161113121" /><figcaption aria-hidden="true">image-20230920161113121</figcaption></figure><p>类型域指明类型；代码域指明作用</p><p><strong>常见<code>ICMP</code>报文：</strong></p><table><thead><tr class="header"><th><strong>名称</strong></th><th><strong>类型</strong></th></tr></thead><tbody><tr class="odd"><td><strong><code>ICMP</code> DestinationUnreachable（目标不可达）</strong></td><td><strong>3</strong></td></tr><tr class="even"><td><strong><code>ICMP</code> Source Quench</strong><strong>（源抑制）</strong></td><td><strong>4</strong></td></tr><tr class="odd"><td><strong><code>ICMP</code> Redirection（重定向）</strong></td><td><strong>5</strong></td></tr><tr class="even"><td><strong><code>ICMP</code> TimestampRequest/Reply（时间戳）</strong></td><td><strong>13/14</strong></td></tr><tr class="odd"><td><strong><code>ICMP</code> Address MaskRequest/Reply（子网掩码）</strong></td><td><strong>17/18</strong></td></tr><tr class="even"><td><strong><code>ICMP</code> EchoRequest/Reply（响应请求/应答）</strong></td><td><strong>8/0</strong></td></tr></tbody></table><p>注：根据RFC的定义，<code>TCP/IP</code>协议栈应该支持各种类型的<code>ICMP</code>报文。但事实上，在各个操作系统具体实现TCP/IP时，可能并没有完全遵循RFC标准。</p><h3 id="其他类型的主机扫描">2.3.1.2 其他类型的主机扫描</h3><ul><li>构造异常的<code>IP</code>包头</li><li>在<code>IP</code>头中设置无效的字段值</li><li>构造错误的数据分片</li><li>通过超长包探测内部路由器</li><li>反向映射探测</li></ul><h2 id="端口扫描">2.3.2 端口扫描</h2><p>参阅：https://nmap.org/man/zh/man-port-scanning-techniques.html</p><h3 id="connect扫描">2.3.2.1 Connect扫描</h3><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309241014075.png"alt="image-20230920162546395" /><figcaption aria-hidden="true">image-20230920162546395</figcaption></figure><ul><li>即TCP Connect扫描。左边为服务端，右边为客户端。</li><li>优点：实现简单、可以用普通用户权限执行</li><li>缺点：容易被目标应用日志所记录</li></ul><h3 id="syn扫描和fin扫描">2.3.2.2 SYN扫描和FIN扫描</h3><p><strong>SYN扫描</strong></p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309241014076.png"alt="image-20230920163233117" /><figcaption aria-hidden="true">image-20230920163233117</figcaption></figure><ul><li>半连接扫描基于TCP三次握手规则，探测服务端口是否开放。</li><li>服务端口开放，会返回<code>SYN/ACK</code>消息</li><li>服务端口关闭，会返回<code>RST</code>消息</li><li>如果数次重发后仍没响应，该端口就被标记为被过滤。如果收到<code>ICMP</code>不可到达错误(类型3，代码1，2，3，9，10，或者13)，该端口也被标记为被过滤。</li><li>优点：一般不会被目标主机的应用所记录</li><li>缺点：运行Raw Socket时必须拥有管理员权限</li></ul><p><strong>FIN扫描</strong></p><ul><li>假设扫描系统遵循RFC标准，如果收到一个<code>RST</code>报文，该端口被认为是closed(关闭的)</li><li>没有响应则意味着端口是open|filtered(开放或者被过滤的)</li><li>如果收到<code>ICMP</code>不可到达错误(类型 3，代号1，2，3，9，10，或者13)，该端口就被标记为被过滤的。</li><li>优点：它们能躲过一些无状态防火墙和报文过滤路由器，不会被记录到日志</li><li>缺点：大部分系统并不遵循该标准</li><li>FIN扫描 (-sF)：只设置<code>TCP FIN</code>标志位。</li><li>Null扫描 (-sN)：不设置任何标志位(tcp标志头是0)</li><li>Xmas扫描(-sX)：设置<code>FIN</code>，<code>PSH</code>，和<code>URG</code>标志位</li><li>除了探测报文的标志位不同，这三种扫描在行为上完全一致。</li></ul><h3 id="其他端口扫描技术">2.3.2.3 其他端口扫描技术</h3><ul><li><code>ACK</code>扫描：向目标主机的端口发送<code>ACK</code>包，如果收到<code>RST</code>包，说明该端口没有被防火墙屏蔽；不响应的端口或者发送特定的<code>ICMP</code>错误消息(类型3，代号1，2，3，9，10，或者13)的端口，标记为 filtered(被过滤的)。</li><li><code>IP</code>分段扫描</li><li>TCP FTP Proxy扫描</li></ul><h3 id="udp扫描">2.3.2.4 UDP扫描</h3><p>只需向目标主机<code>UDP</code>端口发送任意数据，如果端口没有开放，则返回一个“目标不可达”的<code>ICMP</code>报文</p><h2 id="系统类型扫描">2.3.3 系统类型扫描</h2><h3 id="利用端口扫描结果">2.3.3.1 利用端口扫描结果</h3><ul><li>由于现代操作系统往往提供一些自身特有的功能，而这些功能又很可能打开一些特定的端口</li><li>windows：135，137，139等</li><li>Lniux：512，513，514，2049等</li></ul><h3 id="利用banner">2.3.3.2 利用Banner</h3><p>服务程序接收到客户端的正常连接后所给出的欢迎信息</p><h3 id="tcpip协议栈指纹">2.3.3.3 TCP/IP协议栈指纹</h3><ul><li>不同的操作系统在实现<code>TCP/IP</code>协议栈时都或多或少地存在着差异。而这些差异，我们就称之为<code>TCP/IP</code>协议栈指纹</li><li>TCP指纹：<code>FIN</code>探测、<code>BOGUS</code>标记位探测、<code>SYN</code>泛洪测试等</li><li><code>IP</code>、<code>ICMP</code>指纹：<code>ICMP</code>错误信息查询、<code>ICMP</code>信息引用、<code>TOS</code>和<code>TTL</code></li></ul><h1 id="漏洞扫描">2.4 漏洞扫描</h1><h2 id="概念">2.4.1 概念</h2><ul><li><p>漏洞：在计算机安全领域，安全漏洞<code>SecurityHole</code>通常又称作脆弱性（vulnerability）</p></li><li><p>来源：</p><p>（1）硬件、软件或协议设计时的瑕疵 （2）硬件、软件或协议实现中的弱点（3）硬件、软件本身的瑕疵 （4）系统和网络的错误配置</p></li><li><p>漏洞扫描：指利用一些专门或综合漏洞扫描程序对目标存在的系统漏洞或应用程序漏洞进行扫描。</p></li></ul><h2 id="分类">2.4.2 分类</h2><ul><li>主动式策略是<strong>基于网络</strong>的检测，通过执行一些脚本文件对系统进行攻击，并记录它的反应，从而发现其中的漏洞</li><li>被动式策略是<strong>基于主机</strong>的检测，对系统中不合适的设置、脆弱的口令以及其他同安全规则相抵触的对象进行检查</li></ul><h2 id="方法">2.4.3 方法</h2><ul><li>直接测试：指利用漏洞特点发现系统漏洞的方法</li><li>推断：它并不直接渗透漏洞，只是间接地寻找漏洞存在的证据。采用推断方法的检测手段主要有版本检查、程序行为分析、操作系统堆栈指纹分析和时序分析等。</li><li>带凭证的测试：凭证是指访问服务所需要的用户名或者密码，包括UNIX的登录权限和从网络调用WindowsNT的<code>API</code>的能力。如果赋予测试进程目标系统的角色，将能够检查出更多的漏洞。</li></ul><h1 id="网络拓扑探测">2.5 网络拓扑探测</h1><h2 id="拓扑探测">2.5.1 拓扑探测</h2><ul><li><code>Traceroute</code>：<code>UDP</code>数据包、<code>TTL</code></li><li><code>SNMP</code>（简单网络管理协议）：不同类型网络设备之间客户机/服务器模式的简单通信协议<ul><li>Read：观察设备配置信息</li><li>Read/Write：有权写入信息</li></ul></li></ul><h2 id="网络设备识别">2.5.2 网络设备识别</h2><h3 id="利用专门搜索引擎">2.5.2.1 利用专门搜索引擎</h3><p>https://www.shodan.io/</p><p>https://www.zoomeye.org/</p><h3 id="基于设备指纹的设备类型探测">2.5.2.2基于设备指纹的设备类型探测</h3><p>主要介绍基于应用服务Banner的设备识别技术：</p><ul><li>FTP协议</li><li>SSH</li><li>Telnet</li><li>HTTP</li></ul><h3 id="网络实体ip地理位置定位">2.5.2.3 网络实体IP地理位置定位</h3><ul><li>基于查询信息的定位：通过查询机构注册的信息确定网络设备的地理位置</li><li>基于网络测量的定位：利用探测源与目标实体的时延、拓扑或其他信息估计目标实体的位置</li></ul>]]></content>
    
    
    <categories>
      
      <category>网络攻防技术</category>
      
      <category>理论篇</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CH1-网络攻击概述</title>
    <link href="/2023/09/24/%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2%E6%8A%80%E6%9C%AF/%E7%90%86%E8%AE%BA%E7%AF%87/01%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E6%A6%82%E8%BF%B0/"/>
    <url>/2023/09/24/%E7%BD%91%E7%BB%9C%E6%94%BB%E9%98%B2%E6%8A%80%E6%9C%AF/%E7%90%86%E8%AE%BA%E7%AF%87/01%E7%BD%91%E7%BB%9C%E6%94%BB%E5%87%BB%E6%A6%82%E8%BF%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="网络安全威胁">1.1 网络安全威胁</h1><h2 id="事件">1.1.1 事件</h2><h2 id="成因">1.1.2 成因</h2><ul><li>技术因素<ul><li>协议缺陷：网络协议缺乏认证、加密等基本的安全特性</li><li>软件漏洞：软件规模庞大，复杂度提高，开发者安全知识缺乏</li><li>策略弱点：安全需求与应用需求不相一致，安全策略设计不当</li><li>硬件漏洞：硬件设计软件化使得软件漏洞同样出现在硬件之中</li></ul></li><li>人为因素<ul><li>攻击者：成分复杂，多数掌握着丰富的攻击资源</li><li>防御者：广大的网络应用人群缺少安全知识，专业人员数量、质量尚难满足对安全人才的迫切需求</li></ul></li></ul><h1 id="网络攻击技术">1.2 网络攻击技术</h1><h2 id="分类">1.2.1 分类</h2><ul><li>本地（物理）攻击：指攻击者通过实际接触被攻击的主机实施的各种攻击方法</li><li>主动攻击：指攻击者利用Web、FTP、Telnet等开放网络服务对目标实施的各种攻击</li><li>被动攻击：攻击者利用浏览器、邮件接收程序、文字处理程序等客户端应用程序漏洞或系统用户弱点，对目标实施的各种攻击</li><li>中间人攻击：指攻击者处于被攻击主机的某个网络应用的中间人位置，进行数据窃听、破坏或篡改等攻击</li></ul><p>注：主动与被动，主要是看是否需要对方采取动作</p><h2 id="步骤与方法">1.2.2 步骤与方法</h2><ul><li>信息收集</li><li>权限获取</li><li>安装后门</li><li>扩大影响</li><li>清除痕迹</li></ul><h1 id="网络攻击的发展趋势">1.3 网络攻击的发展趋势</h1><ul><li>攻击影响日益深远</li><li>攻击领域不断扩展</li><li>攻击技术愈加精细</li></ul>]]></content>
    
    
    <categories>
      
      <category>网络攻防技术</category>
      
      <category>理论篇</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>GitHub+PicGo搭建免费图床</title>
    <link href="/2023/09/23/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/GitHub+PicGo%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/"/>
    <url>/2023/09/23/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/GitHub+PicGo%E6%90%AD%E5%BB%BA%E5%85%8D%E8%B4%B9%E5%9B%BE%E5%BA%8A/</url>
    
    <content type="html"><![CDATA[<h1 id="操作步骤">1. 操作步骤</h1><h2 id="github">1.1 Github</h2><ul><li><p>新建仓库（注：必须为Public，勾选<code>Add a README file</code>）</p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309231654111.png"alt="image-20230923153333076" /><figcaption aria-hidden="true">image-20230923153333076</figcaption></figure></li><li><p>生成token：点击<code>Github</code>右上角的用户头→<code>Settings</code>→<code>Developer settiings</code>→<code>Personal access tokens</code>→<code>Tokens(classic)</code>→<code>Generate new token</code>，在<code>Note</code>一栏输入创建的仓库名称，并勾选<code>repo</code>，最后在最下方点击<code>Generate token</code>按钮，就生成了对应的<code>Token</code>。注：新生成的<code>Token</code>只会显示一次，请妥善保存，如有遗失，重新生成即可。</p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309231654112.png"alt="image-20230923154939730" /><figcaption aria-hidden="true">image-20230923154939730</figcaption></figure></li></ul><h2 id="picgo">1.2 PicGo</h2><ul><li><p>下载PicGo所需版本</p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309231654113.png"alt="image-20230923155129734" /><figcaption aria-hidden="true">image-20230923155129734</figcaption></figure><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309231654114.png"alt="image-20230923155430395" /><figcaption aria-hidden="true">image-20230923155430395</figcaption></figure></li><li><p>安装（略）</p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309231654115.png"alt="image-20230923155604890" /><figcaption aria-hidden="true">image-20230923155604890</figcaption></figure></li><li><p>配置</p><ul><li><p>为显示简捷，仅勾选GitHub</p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309231654116.png"alt="image-20230923155808379" /><figcaption aria-hidden="true">image-20230923155808379</figcaption></figure></li><li><p><strong>特别注意</strong>：设定仓库名为账户+仓库名；自定义域名需要自己有域名才填写</p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309231654117.png"alt="image-20230923165104951" /><figcaption aria-hidden="true">image-20230923165104951</figcaption></figure></li><li><p>点击<code>设为默认图床</code>，点击<code>确定</code></p></li></ul></li></ul><h2 id="typora">1.3 Typora</h2><p><code>文件</code>→<code>偏好设置</code>→<code>图像</code></p><figure><imgsrc="https://raw.githubusercontent.com/kaikaikai7/BlogImage/main/img/202309231654118.png"alt="image-20230923163344947" /><figcaption aria-hidden="true">image-20230923163344947</figcaption></figure><h1 id="使用方法">2. 使用方法</h1><p>Typora：<code>格式</code>→<code>图像</code>→<code>上传所有本地图片</code></p><p>参考教程：</p><ol type="1"><li><ahref="https://cnhuazhu.top/butterfly/2021/02/20/GitHub+PicGo+jsDelivr搭建免费图床/">GitHub+PicGo+jsDelivr搭建免费图床| 花猪のBlog (cnhuazhu.top)</a></li><li>https://juejin.cn/post/6992451980379553828</li></ol>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Fluid主题配置指南</title>
    <link href="/2023/09/23/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/Fluid%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/"/>
    <url>/2023/09/23/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/Fluid%E4%B8%BB%E9%A2%98%E9%85%8D%E7%BD%AE%E6%8C%87%E5%8D%97/</url>
    
    <content type="html"><![CDATA[<h1 id="关于指南">1. 关于指南</h1><ul><li>本指南中提到的："<strong>站点配置</strong>" 指的 Hexo 博客目录下的<code>_config.yml</code>，"<strong>主题配置</strong>" 指的是<code>theme/fluid/_config.yml</code> 或者 <code>_config.fluid.yml</code>，注意区分；</li><li>本指南中提到的 <code>source</code> 目录都指的是博客目录下的<code>source</code> 文件夹，不推荐修改主题内 <code>source</code>目录；</li></ul><h1 id="全局">2. 全局</h1><h2 id="覆盖配置">2.1 覆盖配置</h2><ul><li><p>在博客根目录下创建 <code>_config.fluid.yml</code> 文件，将主题的<code>_config.yml</code>（不是根目录下的<code>_config.yml</code>）全部配置复制过去，以后如果修改任何主题配置，都只需修改<code>_config.fluid.yml</code> 的配置即可；</p></li><li><p>只要存在于 <code>_config.fluid.yml</code>的配置都是高优先级，修改原 <code>_config.yml</code> 是无效的;</p></li><li><p>每次更新主题可能存在配置变更，请注意更新说明，可能需要手动对<code>_config.fluid.yml</code> 同步修改;</p></li><li><p>想查看覆盖配置有没有生效，可以通过 <code>hexo g --debug</code>查看命令行输出;</p></li><li><p>如果想将某些配置覆盖为空，注意不要把主键删掉，不然是无法覆盖的，比如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">about:</span><br>  <span class="hljs-attr">icons:</span>  <span class="hljs-comment"># 不要把 icon 注释掉，否则无法覆盖配置</span><br>    <span class="hljs-comment"># - &#123; class: &#x27;iconfont icon-github-fill&#x27;, link: &#x27;https://github.com&#x27; &#125;</span><br>    <span class="hljs-comment"># - &#123; class: &#x27;iconfont icon-wechat-fill&#x27;, qrcode: &#x27;/img/favicon.png&#x27; &#125;</span><br></code></pre></td></tr></table></figure></li></ul><h2 id="博客标题">2.2 博客标题</h2><p>页面左上角的博客标题，默认使用<strong>站点配置</strong>中的<code>title</code>，这个配置同时控制着网页在浏览器标签中的标题。如需单独区别设置，可在<strong>主题配置</strong>中设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 导航栏的相关配置</span><br><span class="hljs-comment"># Navigation bar</span><br><span class="hljs-attr">navbar:</span><br>  <span class="hljs-comment"># 导航栏左侧的标题，为空则按 hexo config 中 `title` 显示</span><br>  <span class="hljs-comment"># The title on the left side of the navigation bar. If empty, it is based on `title` in hexo config</span><br>  <span class="hljs-attr">blog_title:</span> <span class="hljs-string">&quot;kaikaikai&#x27;s blog&quot;</span><br></code></pre></td></tr></table></figure><h2 id="导航菜单">2.3 导航菜单</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 导航栏菜单，可自行增减，key 用来关联 languages/*.yml，如不存在关联则显示 key 本身的值；icon 是 css class，可以省略；增加 name 可以强制显示指定名称</span><br> <span class="hljs-comment"># Navigation bar menu. `key` is used to associate languages/*.yml. If there is no association, the value of `key` itself will be displayed; if `icon` is a css class, it can be omitted; adding `name` can force the display of the specified name</span><br> <span class="hljs-attr">menu:</span><br>   <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;home&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-home-fill&quot;</span> &#125;<br>   <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;archive&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/archives/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-archive-fill&quot;</span> &#125;<br>   <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;category&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/categories/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-category-fill&quot;</span> &#125;<br>   <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;tag&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/tags/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-tags-fill&quot;</span> &#125;<br>   <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">key:</span> <span class="hljs-string">&quot;about&quot;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&quot;/about/&quot;</span>, <span class="hljs-attr">icon:</span> <span class="hljs-string">&quot;iconfont icon-user-fill&quot;</span> &#125;<br>   <span class="hljs-comment">#- &#123; key: &quot;links&quot;, link: &quot;/links/&quot;, icon: &quot;iconfont icon-link-fill&quot; &#125;</span><br></code></pre></td></tr></table></figure><h2 id="展示pv与uv统计">2.4 展示PV与UV统计</h2><p>页脚可以展示 PV 与 UV 统计数据，目前支持两种数据来源：<ahref="https://www.leancloud.cn/">LeanCloud</a>与 <ahref="http://busuanzi.ibruce.info/">不蒜子</a>。</p><p>相关<strong>主题配置</strong>如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">footer:</span><br>  <span class="hljs-attr">statistics:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">source:</span> <span class="hljs-string">&quot;busuanzi&quot;</span>  <span class="hljs-comment"># 可选 leancloud | busuanzi  根据自己需求选择</span><br>    <span class="hljs-attr">pv_format:</span> <span class="hljs-string">&quot;总访问量 &#123;&#125; 次&quot;</span>  <span class="hljs-comment"># 显示的文本，&#123;&#125;是数字的占位符（必须包含)，下同</span><br>    <span class="hljs-attr">uv_format:</span> <span class="hljs-string">&quot;总访客数 &#123;&#125; 人&quot;</span><br></code></pre></td></tr></table></figure><h2 id="语言配置">2.5 语言配置</h2><p>不同语言会影响一些主题自带的文字。设置语言是在<strong>站点配置</strong>中，需要对应<code>fluid/languages/</code> 目录内的配置文件名:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">language:</span> <span class="hljs-string">zh-CN</span><br></code></pre></td></tr></table></figure><h1 id="首页">3. 首页</h1><h2 id="文章摘要">3.1 文章摘要</h2><p>开关自动摘要（默认开启）：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">index:</span><br>  <span class="hljs-attr">auto_excerpt:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>若要手动指定摘要，使用 <code>&lt;!-- more --&gt;</code>MD文档里划分，如：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs markdown">正文的一部分作为摘要<br>&lt;!-- more --&gt;<br>余下的正文<br></code></pre></td></tr></table></figure><p>或者在 <ahref="https://hexo.io/zh-cn/docs/front-matter">front-matter</a>里设置<code>excerpt</code> 字段，如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">这是标题</span><br><span class="hljs-attr">excerpt:</span> <span class="hljs-string">这是摘要</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>TIP</p><ul><li><p>优先级: 手动摘要 &gt; 自动摘要</p></li><li><p>如果关闭自动摘要，并且没有设置手动摘要，摘要区域空白</p></li><li><p>无论哪种摘要都最多显示 3行，当屏幕宽度不足时会隐藏部分摘要。</p></li></ul><h2 id="文章跳转方式">3.2 文章跳转方式</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># 打开文章的标签方式</span><br>  <span class="hljs-comment"># The browser tag to open the post</span><br>  <span class="hljs-comment"># Available: _blank | _self</span><br>  <span class="hljs-attr">post_url_target:</span> <span class="hljs-string">_self</span><br></code></pre></td></tr></table></figure><h2 id="文章信息">3.3 文章信息</h2><p>可配置隐藏包括发布时间、分类、标签。经过测试，如果首页的文章列表中没有略缩图和摘要，标题+文章信息的显示方式会使页面过于拥挤，所以给出此项配置供喜欢首页只显示文章标题的同学使用。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">index:</span><br>  <span class="hljs-attr">post_meta:</span><br>    <span class="hljs-attr">date:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">category:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">tag:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h2 id="隐藏文章">3.4 隐藏文章</h2><p>如果想把某些文章隐藏，<strong>不在首页和其他归档分类页里展示</strong>，可以在文章开头<a href="https://hexo.io/zh-cn/docs/front-matter">front-matter</a>中配置<code>hide: true</code> 属性。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">文章标题</span><br><span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/example.jpg</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-10-10 10:00:00</span><br><span class="hljs-attr">hide:</span> <span class="hljs-literal">true</span><br><span class="hljs-meta">---</span><br><span class="hljs-string">以下是文章内容</span><br></code></pre></td></tr></table></figure><p>隐藏后依然可以通过文章链接访问，所以可以用于一些需要链接跳转的特殊文章。</p><h2 id="归档文章">3.5 归档文章</h2><p>如果只是想让文章在首页隐藏，但仍<strong>需要在归档分类页里展示</strong>，可以在文章开头<a href="https://hexo.io/zh-cn/docs/front-matter">front-matter</a>中配置<code>archive: true</code> 属性。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">文章标题</span><br><span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/example.jpg</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-10-10 10:00:00</span><br><span class="hljs-attr">archive:</span> <span class="hljs-literal">true</span><br><span class="hljs-meta">---</span><br><span class="hljs-string">以下是文章内容</span><br></code></pre></td></tr></table></figure><h2 id="文章排序">3.6 文章排序</h2><p>如果想手动将某些文章固定在首页靠前的位置，可以在安装<code>hexo-generator-index</code> &gt;= 2.0.0 版本的情况下，在文章开头<a href="https://hexo.io/zh-cn/docs/front-matter">front-matter</a>中配置<code>sticky</code> 属性：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">文章标题</span><br><span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/example.jpg</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-10-10 10:00:00</span><br><span class="hljs-attr">sticky:</span> <span class="hljs-number">100</span><br><span class="hljs-meta">---</span><br><span class="hljs-string">以下是文章内容</span><br></code></pre></td></tr></table></figure><p><code>sticky</code>数值越大，该文章越靠前，达到类似于置顶的效果，其他未设置的文章依然按默认排序。</p><p>当文章设置了 <code>sticky</code>后，主题会默认在首页文章标题前增加一个图标，来标识这是一个置顶文章，你可以通过<strong>主题配置</strong>去关闭或修改这个功能：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">index:</span><br>  <span class="hljs-attr">post_sticky:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">icon:</span> <span class="hljs-string">&#x27;iconfont icon-top&#x27;</span><br></code></pre></td></tr></table></figure><p><code>icon</code> 可以通过<ahref="https://fluid-dev.github.io/hexo-fluid-docs/icon/">自定义图标</a>修改为其他图标。</p><h1 id="文章页">4. 文章页</h1><h2 id="文章封面图">4.1 文章封面图</h2><p>对于单篇文章，在文章开头 <ahref="https://hexo.io/zh-cn/docs/front-matter">front-matter</a>中配置<code>index_img</code> 属性。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">文章标题</span><br><span class="hljs-attr">tags:</span> [<span class="hljs-string">Hexo</span>, <span class="hljs-string">Fluid</span>]<br><span class="hljs-attr">index_img:</span> <span class="hljs-string">/img/example.jpg</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2019-10-10 10:00:00</span><br><span class="hljs-meta">---</span><br><span class="hljs-string">以下是文章内容</span><br></code></pre></td></tr></table></figure><p>和 Banner 配置相同，<code>/img/example.jpg</code> 对应的是存放在<code>/source/img/example.jpg</code>目录下的图片（目录也可自定义，但必须在 source 目录下）。</p><p>也可以使用外链 Url 的绝对路径。</p><p>如果想统一给文章设置一个默认图片（文章不设置 <code>index_img</code>则默认使用这张图片），可在<strong>主题配置</strong>中设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">default_index_img:</span> <span class="hljs-string">/img/example.jpg</span><br></code></pre></td></tr></table></figure><p>当 <code>default_index_img</code> 和 <code>index_img</code>都为空时，该文章在首页将不显示图片。</p><h2 id="文章内容图片">4.2 文章内容图片</h2><p>本地图片存放位置同上。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs markdown">![](<span class="hljs-link">/img/example.jpg</span>)<br></code></pre></td></tr></table></figure><h2 id="代码块">4.3 代码块</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">code:</span><br>  <span class="hljs-attr">copy_btn:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">highlight:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">line_number:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">lib:</span> <span class="hljs-string">&quot;highlightjs&quot;</span><br>    <span class="hljs-attr">highlightjs:</span><br>      <span class="hljs-attr">style:</span> <span class="hljs-string">&#x27;Github Gist&#x27;</span><br>      <span class="hljs-attr">bg_color:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">prismjs:</span><br>      <span class="hljs-attr">style:</span> <span class="hljs-string">&quot;default&quot;</span><br>      <span class="hljs-attr">preprocess:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><code>copy_btn</code>: 是否开启复制代码的按钮</p><p><code>line_number</code>: 是否开启行号</p><p><code>highlight</code>: 是否开启代码高亮</p><p><code>lib</code>: 选择生成高亮的库，可选项:<code>highlightjs</code>、<code>prismjs</code>，对应下面两组配置，高亮的配置说明具体见<strong>主题配置</strong>中的注释</p><h2 id="latex-数学公式">4.4 LaTeX 数学公式</h2><ol type="1"><li><p>修改配置文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">post:</span><br>  <span class="hljs-attr">math:</span><br>    <span class="hljs-attr">enable:</span> <span class="hljs-literal">true</span><br>    <span class="hljs-attr">specific:</span> <span class="hljs-literal">false</span><br>    <span class="hljs-attr">engine:</span> <span class="hljs-string">mathjax</span><br></code></pre></td></tr></table></figure></li><li><p>更换 Markdown 渲染器(mathjax)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">cnpm uninstall hexo-renderer-marked --save<br>cnpm install hexo-renderer-pandoc --save<br></code></pre></td></tr></table></figure></li><li><p>安装pandoc（需重启电脑）：<ahref="https://github.com/jgm/pandoc/blob/main/INSTALL.md">pandoc/INSTALL.mdat main · jgm/pandoc (github.com)</a></p></li></ol><h1 id="front-matter">5. Front-matter</h1><p>Front-matter 是文件最上方以 <code>---</code>分隔的区域，用于指定个别文件的变量，举例来说：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">Hello</span> <span class="hljs-string">World</span><br><span class="hljs-attr">date:</span> <span class="hljs-number">2013</span><span class="hljs-string">/7/13</span> <span class="hljs-number">20</span><span class="hljs-string">:46:25</span><br><span class="hljs-meta">---</span><br></code></pre></td></tr></table></figure><p>以下是预先定义的参数，您可在模板中使用这些参数值并加以利用。</p><table><thead><tr class="header"><th style="text-align: left;">参数</th><th style="text-align: left;">描述</th><th style="text-align: left;">默认值</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;"><code>layout</code></td><td style="text-align: left;">布局</td><td style="text-align: left;"><ahref="https://hexo.io/zh-cn/docs/configuration#文章"><code>config.default_layout</code></a></td></tr><tr class="even"><td style="text-align: left;"><code>title</code></td><td style="text-align: left;">标题</td><td style="text-align: left;">文章的文件名</td></tr><tr class="odd"><td style="text-align: left;"><code>date</code></td><td style="text-align: left;">建立日期</td><td style="text-align: left;">文件建立日期</td></tr><tr class="even"><td style="text-align: left;"><code>updated</code></td><td style="text-align: left;">更新日期</td><td style="text-align: left;">文件更新日期</td></tr><tr class="odd"><td style="text-align: left;"><code>comments</code></td><td style="text-align: left;">开启文章的评论功能</td><td style="text-align: left;"><code>true</code></td></tr><tr class="even"><td style="text-align: left;"><code>tags</code></td><td style="text-align: left;">标签（不适用于分页）</td><td style="text-align: left;"></td></tr><tr class="odd"><td style="text-align: left;"><code>categories</code></td><td style="text-align: left;">分类（不适用于分页）</td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><code>permalink</code></td><td style="text-align: left;">覆盖文章的永久链接，永久链接应该以<code>/</code> 或 <code>.html</code> 结尾</td><td style="text-align: left;"><code>null</code></td></tr><tr class="odd"><td style="text-align: left;"><code>excerpt</code></td><td style="text-align: left;">纯文本的页面摘要。使用 <ahref="https://hexo.io/zh-cn/docs/tag-plugins#文章摘要和截断">该插件</a>来格式化文本</td><td style="text-align: left;"></td></tr><tr class="even"><td style="text-align: left;"><code>disableNunjucks</code></td><td style="text-align: left;">启用时禁用 Nunjucks 标签<code>&#123;&#123; &#125;&#125;</code>/<code>&#123;% %&#125;</code> 和<a href="https://hexo.io/zh-cn/docs/tag-plugins">标签插件</a>的渲染功能</td><td style="text-align: left;">false</td></tr><tr class="odd"><td style="text-align: left;"><code>lang</code></td><td style="text-align: left;">设置语言以覆盖 <ahref="https://hexo.io/zh-cn/docs/internationalization#路径">自动检测</a></td><td style="text-align: left;">继承自 <code>_config.yml</code></td></tr><tr class="even"><td style="text-align: left;"><code>published</code></td><td style="text-align: left;">文章是否发布</td><td style="text-align: left;">对于 <code>_posts</code> 下的文章为<code>true</code>，对于 <code>_draft</code> 下的文章为<code>false</code></td></tr></tbody></table><h1 id="关于页">6. 关于页</h1><h2 id="创建关于页">6.1 创建关于页</h2><p>首次使用主题的「关于页」需要手动创建：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new page about<br></code></pre></td></tr></table></figure><p>创建成功后修改 <code>/source/about/index.md</code>，添加<code>layout</code> 属性。</p><p>修改后的文件示例如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-meta">---</span><br><span class="hljs-attr">title:</span> <span class="hljs-string">标题</span><br><span class="hljs-attr">layout:</span> <span class="hljs-string">about</span><br><span class="hljs-meta">---</span><br><span class="hljs-meta"></span><br><span class="hljs-string">这里可以写正文，支持</span> <span class="hljs-string">Markdown,</span> <span class="hljs-string">HTML</span><br></code></pre></td></tr></table></figure><p>WARNING：<code>layout: about</code>必须存在，并且不能修改成其他值，否则不会显示头像等样式。</p><h2 id="关于信息">6.2 关于信息</h2><p>在关于页介绍自己的基础信息，可以在<strong>主题配置</strong>中设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">about:</span><br>  <span class="hljs-attr">avatar:</span> <span class="hljs-string">/img/avatar.png</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">&quot;Fluid&quot;</span><br>  <span class="hljs-attr">intro:</span> <span class="hljs-string">&quot;An elegant theme for Hexo&quot;</span><br></code></pre></td></tr></table></figure><h2 id="社交页图标">6.3 社交页图标</h2><p>在<strong>主题配置</strong>中设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">about:</span><br>  <span class="hljs-attr">icons:</span><br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&#x27;iconfont icon-github-fill&#x27;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&#x27;https://github.com&#x27;</span>, <span class="hljs-attr">tip:</span> <span class="hljs-string">&#x27;GitHub&#x27;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&#x27;iconfont icon-douban-fill&#x27;</span>, <span class="hljs-attr">link:</span> <span class="hljs-string">&#x27;https://douban.com&#x27;</span>, <span class="hljs-attr">tip:</span> <span class="hljs-string">&#x27;豆瓣&#x27;</span> &#125;<br>    <span class="hljs-bullet">-</span> &#123; <span class="hljs-attr">class:</span> <span class="hljs-string">&#x27;iconfont icon-wechat-fill&#x27;</span>, <span class="hljs-attr">qrcode:</span> <span class="hljs-string">&#x27;/img/favicon.png&#x27;</span> &#125;<br></code></pre></td></tr></table></figure><ul><li><code>class</code>: 图标的<code>css class</code>，主题内置图标详见<ahref="https://fluid-dev.github.io/hexo-fluid-docs/icon/">这里</a></li><li><code>link</code>: 跳转链接</li><li><code>tip</code>: 鼠标悬浮在图标上显示的提示文字</li><li><code>qrcode</code>:二维码图片，当使用此字段后，点击不再跳转，而是悬浮二维码</li></ul><p>参考教程：</p><ol type="1"><li>https://fluid-dev.github.io/hexo-fluid-docs/guide/</li></ol>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>快速搭建hexo博客</title>
    <link href="/2023/09/23/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/09/23/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="前期准备">1. 前期准备</h1><h2 id="安装node.js">1.1 安装Node.js</h2><p>官网链接：https://nodejs.org/en</p><p>安装教程：<ahref="https://blog.csdn.net/WHF__/article/details/129362462?spm=1001.2014.3001.5506">Node.js下载安装及环境配置教程【超详细】_nodejs下载-CSDN博客</a></p><p>npm运行报错解决方案：<ahref="https://blog.csdn.net/weixin_37861326/article/details/104295379?spm=1001.2014.3001.5506">npm运行时报错“因为在此系统上禁止运行脚本”解决办法_npm : 无法加载文件c:files.ps1,因为在此系__cris的博客-CSDN博客</a></p><h2 id="注册github账户">1.2 注册github账户</h2><h2 id="安装hexo">1.3 安装hexo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cnpm install -g hexo-cli<br></code></pre></td></tr></table></figure><h1 id="快速搭建">2. 快速搭建</h1><h2 id="创建根目录">2.1 创建根目录</h2><p>本地创建一个文件夹，作为博客部署的空间，后续操作均基于该根目录</p><h2 id="初始化">2.2 初始化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo init<br></code></pre></td></tr></table></figure><h2 id="启动本地服务">2.3 启动本地服务</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo s<br></code></pre></td></tr></table></figure><h2 id="新建文章">2.4 新建文章</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo n <span class="hljs-string">&quot;My first blog&quot;</span><br></code></pre></td></tr></table></figure><h2 id="清理缓存">2.5 清理缓存</h2><p>注：每次无论 <code>hexo g</code> 或 <code>hexo s</code>，都最好先使用<code>hexo clean</code> 清除本地缓存</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo clean<br></code></pre></td></tr></table></figure><h2 id="生成静态文件">2.6 生成静态文件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo g<br></code></pre></td></tr></table></figure><h1 id="部署到github">3. 部署到github</h1><h2 id="新建仓库">3.1 新建仓库</h2><p>注：命名格式为固定要求</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">账户名<span class="hljs-selector-class">.github</span><span class="hljs-selector-class">.io</span>(例：kaikaikai7<span class="hljs-selector-class">.github</span>.io)<br></code></pre></td></tr></table></figure><h2 id="安装插件">3.2 安装插件</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cnpm install --save hexo-deployer-git<br></code></pre></td></tr></table></figure><h2 id="修改配置文件">3.3 修改配置文件</h2><ol type="1"><li><p>进入根目录下_config.yml文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim _config.yml<br></code></pre></td></tr></table></figure></li><li><p>修改Deployment部分内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Deployment</span><br><span class="hljs-comment">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="hljs-attr">deploy:</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">git</span><br>  <span class="hljs-attr">repo:</span> <span class="hljs-string">https://github.com/kaikaikai7/kaikaikai7.github.io.git</span><br>  <span class="hljs-attr">branch:</span> <span class="hljs-string">master</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="部署">3.4 部署</h2><p>注：页面结果以本地 <code>hexo s</code>为准，部署后的异常大部分是线上缓存原因，在确认没有报错的情况下，等待若干时间后即可正常</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">hexo d<br></code></pre></td></tr></table></figure><h2 id="访问">3.5 访问</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>账户名.github.io/<br>（例：https:<span class="hljs-regexp">//</span>kaikaikai7.github.io/）<br></code></pre></td></tr></table></figure><h1 id="更换主题">4. 更换主题</h1><h2 id="主题官网">4.1 主题官网</h2><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>hexo.io<span class="hljs-regexp">/themes/</span><br></code></pre></td></tr></table></figure><h2 id="下载主题">4.2 下载主题</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> 主题地址.git themes/目录<br>（例：git <span class="hljs-built_in">clone</span> https://github.com/litten/hexo-theme-yilia.git themes/yilia）<br></code></pre></td></tr></table></figure><h2 id="修改配置文件-1">4.3 修改配置文件</h2><ol type="1"><li><p>进入根目录下_config.yml文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">vim _config.yml<br></code></pre></td></tr></table></figure></li><li><p>修改Extensions部分内容</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-comment"># Extensions</span><br><span class="hljs-comment">## Plugins: https://hexo.io/plugins/</span><br><span class="hljs-comment">## Themes: https://hexo.io/themes/</span><br><span class="hljs-attr">theme:</span> <span class="hljs-string">fluid</span><br></code></pre></td></tr></table></figure></li></ol><p>参考教程：</p><ol type="1"><li>https://www.bilibili.com/video/BV1Yb411a7ty/</li><li><ahref="https://cnhuazhu.top/butterfly/2021/01/21/Hexo快速搭建一个博客/">Hexo快速搭建一个博客| 花猪のBlog (cnhuazhu.top)</a></li></ol>]]></content>
    
    
    <categories>
      
      <category>博客搭建</category>
      
    </categories>
    
    
  </entry>
  
  
  
  
</search>
